// Autogenerated by discovery-gen v0.x.
module google_api.sheets.d_types;

public import std.typecons: Nullable, Ternary, apply, nullable; ///
public import vibe.data.json: JSONException, Json; ///

import google_api.d.attributes;
import google_api.d.http: GoogleHttpClient;

///
package struct P {
	///
	enum Alt: ubyte {
		/// Responses with Content-Type of application/json
		json,
		/// Media download with context-dependent Content-Type
		media,
		/// Responses with Content-Type of application/x-protobuf
		proto,
	}

	///
	enum Type_0: ubyte {
		NUMBER_FORMAT_TYPE_UNSPECIFIED,
		/// The number format is not specified and is based on the contents of the cell. Do not explicitly use this.
		numberFormatTypeUnspecified = 0,
		TEXT,
		/// Text formatting, e.g `1000.12`
		text = 1,
		NUMBER,
		/// Number formatting, e.g, `1,000.12`
		number = 2,
		PERCENT,
		/// Percent formatting, e.g `10.12%`
		percent = 3,
		CURRENCY,
		/// Currency formatting, e.g `$1,000.12`
		currency = 4,
		DATE,
		/// Date formatting, e.g `9/26/2008`
		date = 5,
		TIME,
		/// Time formatting, e.g `3:59:00 PM`
		time = 6,
		DATE_TIME,
		/// Date+Time formatting, e.g `9/26/08 15:59:00`
		dateTime = 7,
		SCIENTIFIC,
		/// Scientific number formatting, e.g `1.01E+03`
		scientific = 8,
	}

	///
	enum ThemeColor: ubyte {
		THEME_COLOR_TYPE_UNSPECIFIED,
		/// Unspecified theme color
		themeColorTypeUnspecified = 0,
		TEXT,
		/// Represents the primary text color
		text = 1,
		BACKGROUND,
		/// Represents the primary background color
		background = 2,
		ACCENT1,
		/// Represents the first accent color
		accent1 = 3,
		ACCENT2,
		/// Represents the second accent color
		accent2 = 4,
		ACCENT3,
		/// Represents the third accent color
		accent3 = 5,
		ACCENT4,
		/// Represents the fourth accent color
		accent4 = 6,
		ACCENT5,
		/// Represents the fifth accent color
		accent5 = 7,
		ACCENT6,
		/// Represents the sixth accent color
		accent6 = 8,
		LINK,
		/// Represents the color to use for hyperlinks
		link = 9,
	}

	///
	enum Style: ubyte {
		STYLE_UNSPECIFIED,
		/// The style is not specified. Do not use this.
		styleUnspecified = 0,
		DOTTED,
		/// The border is dotted.
		dotted = 1,
		DASHED,
		/// The border is dashed.
		dashed = 2,
		SOLID,
		/// The border is a thin solid line.
		solid = 3,
		SOLID_MEDIUM,
		/// The border is a medium solid line.
		solidMedium = 4,
		SOLID_THICK,
		/// The border is a thick solid line.
		solidThick = 5,
		NONE,
		/// No border. Used only when updating a border in order to erase it.
		none = 6,
		DOUBLE,
		/// The border is two solid lines.
		double_ = 7,
	}

	///
	enum State: ubyte {
		DATA_EXECUTION_STATE_UNSPECIFIED,
		/// Default value, do not use.
		dataExecutionStateUnspecified = 0,
		NOT_STARTED,
		/// The data execution has not started.
		notStarted = 1,
		RUNNING,
		/// The data execution has started and is running.
		running = 2,
		SUCCEEDED,
		/// The data execution has completed successfully.
		succeeded = 3,
		FAILED,
		/// The data execution has completed with errors.
		failed = 4,
	}

	///
	enum Type_1: ubyte {
		ERROR_TYPE_UNSPECIFIED,
		/// The default error type, do not use this.
		errorTypeUnspecified = 0,
		ERROR,
		/// Corresponds to the `#ERROR!` error.
		error = 1,
		NULL_VALUE,
		/// Corresponds to the `#NULL!` error.
		nullValue = 2,
		DIVIDE_BY_ZERO,
		/// Corresponds to the `#DIV/0` error.
		divideByZero = 3,
		VALUE,
		/// Corresponds to the `#VALUE!` error.
		value = 4,
		REF,
		/// Corresponds to the `#REF!` error.
		ref_ = 5,
		NAME,
		/// Corresponds to the `#NAME?` error.
		name = 6,
		NUM,
		/// Corresponds to the `#NUM!` error.
		num = 7,
		N_A,
		/// Corresponds to the `#N/A` error.
		nA = 8,
		LOADING,
		/// Corresponds to the `Loading...` state.
		loading = 9,
	}

	///
	enum Type_2: ubyte {
		CONDITION_TYPE_UNSPECIFIED,
		/// The default value, do not use.
		conditionTypeUnspecified = 0,
		NUMBER_GREATER,
		/// The cell's value must be greater than the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		numberGreater = 1,
		NUMBER_GREATER_THAN_EQ,
		/// The cell's value must be greater than or equal to the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		numberGreaterThanEq = 2,
		NUMBER_LESS,
		/// The cell's value must be less than the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		numberLess = 3,
		NUMBER_LESS_THAN_EQ,
		/// The cell's value must be less than or equal to the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		numberLessThanEq = 4,
		NUMBER_EQ,
		/// The cell's value must be equal to the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue for data validation, conditional formatting, and filters on non-data source objects and at least one ConditionValue for filters on data source objects.
		numberEq = 5,
		NUMBER_NOT_EQ,
		/// The cell's value must be not equal to the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue for data validation, conditional formatting, and filters on non-data source objects and at least one ConditionValue for filters on data source objects.
		numberNotEq = 6,
		NUMBER_BETWEEN,
		/// The cell's value must be between the two condition values. Supported by data validation, conditional formatting and filters. Requires exactly two ConditionValues.
		numberBetween = 7,
		NUMBER_NOT_BETWEEN,
		/// The cell's value must not be between the two condition values. Supported by data validation, conditional formatting and filters. Requires exactly two ConditionValues.
		numberNotBetween = 8,
		TEXT_CONTAINS,
		/// The cell's value must contain the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		textContains = 9,
		TEXT_NOT_CONTAINS,
		/// The cell's value must not contain the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue.
		textNotContains = 10,
		TEXT_STARTS_WITH,
		/// The cell's value must start with the condition's value. Supported by conditional formatting and filters. Requires a single ConditionValue.
		textStartsWith = 11,
		TEXT_ENDS_WITH,
		/// The cell's value must end with the condition's value. Supported by conditional formatting and filters. Requires a single ConditionValue.
		textEndsWith = 12,
		TEXT_EQ,
		/// The cell's value must be exactly the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue for data validation, conditional formatting, and filters on non-data source objects and at least one ConditionValue for filters on data source objects.
		textEq = 13,
		TEXT_IS_EMAIL,
		/// The cell's value must be a valid email address. Supported by data validation. Requires no ConditionValues.
		textIsEmail = 14,
		TEXT_IS_URL,
		/// The cell's value must be a valid URL. Supported by data validation. Requires no ConditionValues.
		textIsUrl = 15,
		DATE_EQ,
		/// The cell's value must be the same date as the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue for data validation, conditional formatting, and filters on non-data source objects and at least one ConditionValue for filters on data source objects.
		dateEq = 16,
		DATE_BEFORE,
		/// The cell's value must be before the date of the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue that may be a relative date.
		dateBefore = 17,
		DATE_AFTER,
		/// The cell's value must be after the date of the condition's value. Supported by data validation, conditional formatting and filters. Requires a single ConditionValue that may be a relative date.
		dateAfter = 18,
		DATE_ON_OR_BEFORE,
		/// The cell's value must be on or before the date of the condition's value. Supported by data validation. Requires a single ConditionValue that may be a relative date.
		dateOnOrBefore = 19,
		DATE_ON_OR_AFTER,
		/// The cell's value must be on or after the date of the condition's value. Supported by data validation. Requires a single ConditionValue that may be a relative date.
		dateOnOrAfter = 20,
		DATE_BETWEEN,
		/// The cell's value must be between the dates of the two condition values. Supported by data validation. Requires exactly two ConditionValues.
		dateBetween = 21,
		DATE_NOT_BETWEEN,
		/// The cell's value must be outside the dates of the two condition values. Supported by data validation. Requires exactly two ConditionValues.
		dateNotBetween = 22,
		DATE_IS_VALID,
		/// The cell's value must be a date. Supported by data validation. Requires no ConditionValues.
		dateIsValid = 23,
		ONE_OF_RANGE,
		/// The cell's value must be listed in the grid in condition value's range. Supported by data validation. Requires a single ConditionValue, and the value must be a valid range in A1 notation.
		oneOfRange = 24,
		ONE_OF_LIST,
		/// The cell's value must be in the list of condition values. Supported by data validation. Supports any number of condition values, one per item in the list. Formulas are not supported in the values.
		oneOfList = 25,
		BLANK,
		/// The cell's value must be empty. Supported by conditional formatting and filters. Requires no ConditionValues.
		blank = 26,
		NOT_BLANK,
		/// The cell's value must not be empty. Supported by conditional formatting and filters. Requires no ConditionValues.
		notBlank = 27,
		CUSTOM_FORMULA,
		/// The condition's formula must evaluate to true. Supported by data validation, conditional formatting and filters. Not supported by data source sheet filters. Requires a single ConditionValue.
		customFormula = 28,
		BOOLEAN,
		/// The cell's value must be TRUE/FALSE or in the list of condition values. Supported by data validation. Renders as a cell checkbox. Supports zero, one or two ConditionValues. No values indicates the cell must be TRUE or FALSE, where TRUE renders as checked and FALSE renders as unchecked. One value indicates the cell will render as checked when it contains that value and unchecked when it is blank. Two values indicate that the cell will render as checked when it contains the first value and unchecked when it contains the second value. For example, ["Yes","No"] indicates that the cell will render a checked box when it has the value "Yes" and an unchecked box when it has the value "No".
		boolean = 29,
		TEXT_NOT_EQ,
		/// The cell's value must be exactly not the condition's value. Supported by filters on data source objects. Requires at least one ConditionValue.
		textNotEq = 30,
		DATE_NOT_EQ,
		/// The cell's value must be exactly not the condition's value. Supported by filters on data source objects. Requires at least one ConditionValue.
		dateNotEq = 31,
		FILTER_EXPRESSION,
		/// The cell's value must follow the pattern specified. Requires a single ConditionValue.
		filterExpression = 32,
	}

	///
	enum Type_3: ubyte {
		DATE_TIME_RULE_TYPE_UNSPECIFIED,
		/// The default type, do not use.
		dateTimeRuleTypeUnspecified = 0,
		SECOND,
		/// Group dates by second, from 0 to 59.
		second = 1,
		MINUTE,
		/// Group dates by minute, from 0 to 59.
		minute = 2,
		HOUR,
		/// Group dates by hour using a 24-hour system, from 0 to 23.
		hour = 3,
		HOUR_MINUTE,
		/// Group dates by hour and minute using a 24-hour system, for example 19:45.
		hourMinute = 4,
		HOUR_MINUTE_AMPM,
		/// Group dates by hour and minute using a 12-hour system, for example 7:45 PM. The AM/PM designation is translated based on the spreadsheet locale.
		hourMinuteAmpm = 5,
		DAY_OF_WEEK,
		/// Group dates by day of week, for example Sunday. The days of the week will be translated based on the spreadsheet locale.
		dayOfWeek = 6,
		DAY_OF_YEAR,
		/// Group dates by day of year, from 1 to 366. Note that dates after Feb. 29 fall in different buckets in leap years than in non-leap years.
		dayOfYear = 7,
		DAY_OF_MONTH,
		/// Group dates by day of month, from 1 to 31.
		dayOfMonth = 8,
		DAY_MONTH,
		/// Group dates by day and month, for example 22-Nov. The month is translated based on the spreadsheet locale.
		dayMonth = 9,
		MONTH,
		/// Group dates by month, for example Nov. The month is translated based on the spreadsheet locale.
		month = 10,
		QUARTER,
		/// Group dates by quarter, for example Q1 (which represents Jan-Mar).
		quarter = 11,
		YEAR,
		/// Group dates by year, for example 2008.
		year = 12,
		YEAR_MONTH,
		/// Group dates by year and month, for example 2008-Nov. The month is translated based on the spreadsheet locale.
		yearMonth = 13,
		YEAR_QUARTER,
		/// Group dates by year and quarter, for example 2008 Q4.
		yearQuarter = 14,
		YEAR_MONTH_DAY,
		/// Group dates by year, month, and day, for example 2008-11-22.
		yearMonthDay = 15,
	}

	///
	enum Type_4: ubyte {
		INTERPOLATION_POINT_TYPE_UNSPECIFIED,
		/// The default value, do not use.
		interpolationPointTypeUnspecified = 0,
		MIN,
		/// The interpolation point uses the minimum value in the cells over the range of the conditional format.
		min_ = 1,
		MAX,
		/// The interpolation point uses the maximum value in the cells over the range of the conditional format.
		max_ = 2,
		NUMBER,
		/// The interpolation point uses exactly the value in InterpolationPoint.value.
		number = 3,
		PERCENT,
		/// The interpolation point is the given percentage over all the cells in the range of the conditional format. This is equivalent to `NUMBER` if the value was: `=(MAX(FLATTEN(range)) * (value / 100)) + (MIN(FLATTEN(range)) * (1 - (value / 100)))` (where errors in the range are ignored when flattening).
		percent = 4,
		PERCENTILE,
		/// The interpolation point is the given percentile over all the cells in the range of the conditional format. This is equivalent to `NUMBER` if the value was: `=PERCENTILE(FLATTEN(range), value / 100)` (where errors in the range are ignored when flattening).
		percentile = 5,
	}

	///
	enum Type_5: ubyte {
		BASIC_CHART_TYPE_UNSPECIFIED,
		/// Default value, do not use.
		basicChartTypeUnspecified = 0,
		BAR,
		/// A bar chart.
		bar = 1,
		LINE,
		/// A line chart.
		line = 2,
		AREA,
		/// An area chart.
		area = 3,
		COLUMN,
		/// A column chart.
		column = 4,
		SCATTER,
		/// A scatter chart.
		scatter = 5,
		COMBO,
		/// A combo chart.
		combo = 6,
		STEPPED_AREA,
		/// A stepped area chart.
		steppedArea = 7,
	}

	///
	enum LegendPosition_0: ubyte {
		BASIC_CHART_LEGEND_POSITION_UNSPECIFIED,
		/// Default value, do not use.
		basicChartLegendPositionUnspecified = 0,
		BOTTOM_LEGEND,
		/// The legend is rendered on the bottom of the chart.
		bottomLegend = 1,
		LEFT_LEGEND,
		/// The legend is rendered on the left of the chart.
		leftLegend = 2,
		RIGHT_LEGEND,
		/// The legend is rendered on the right of the chart.
		rightLegend = 3,
		TOP_LEGEND,
		/// The legend is rendered on the top of the chart.
		topLegend = 4,
		NO_LEGEND,
		/// No legend is rendered.
		noLegend = 5,
	}

	///
	enum StackedType_0: ubyte {
		BASIC_CHART_STACKED_TYPE_UNSPECIFIED,
		/// Default value, do not use.
		basicChartStackedTypeUnspecified = 0,
		NOT_STACKED,
		/// Series are not stacked.
		notStacked = 1,
		STACKED,
		/// Series values are stacked, each value is rendered vertically beginning from the top of the value below it.
		stacked = 2,
		PERCENT_STACKED,
		/// Vertical stacks are stretched to reach the top of the chart, with values laid out as percentages of each other.
		percentStacked = 3,
	}

	///
	enum TargetAxis: ubyte {
		BASIC_CHART_AXIS_POSITION_UNSPECIFIED,
		/// Default value, do not use.
		basicChartAxisPositionUnspecified = 0,
		BOTTOM_AXIS,
		/// The axis rendered at the bottom of a chart. For most charts, this is the standard major axis. For bar charts, this is a minor axis.
		bottomAxis = 1,
		LEFT_AXIS,
		/// The axis rendered at the left of a chart. For most charts, this is a minor axis. For bar charts, this is the standard major axis.
		leftAxis = 2,
		RIGHT_AXIS,
		/// The axis rendered at the right of a chart. For most charts, this is a minor axis. For bar charts, this is an unusual major axis.
		rightAxis = 3,
	}

	///
	enum Type_6: ubyte {
		CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED,
		/// The default type, do not use.
		chartDateTimeRuleTypeUnspecified = 0,
		SECOND,
		/// Group dates by second, from 0 to 59.
		second = 1,
		MINUTE,
		/// Group dates by minute, from 0 to 59.
		minute = 2,
		HOUR,
		/// Group dates by hour using a 24-hour system, from 0 to 23.
		hour = 3,
		HOUR_MINUTE,
		/// Group dates by hour and minute using a 24-hour system, for example 19:45.
		hourMinute = 4,
		HOUR_MINUTE_AMPM,
		/// Group dates by hour and minute using a 12-hour system, for example 7:45 PM. The AM/PM designation is translated based on the spreadsheet locale.
		hourMinuteAmpm = 5,
		DAY_OF_WEEK,
		/// Group dates by day of week, for example Sunday. The days of the week will be translated based on the spreadsheet locale.
		dayOfWeek = 6,
		DAY_OF_YEAR,
		/// Group dates by day of year, from 1 to 366. Note that dates after Feb. 29 fall in different buckets in leap years than in non-leap years.
		dayOfYear = 7,
		DAY_OF_MONTH,
		/// Group dates by day of month, from 1 to 31.
		dayOfMonth = 8,
		DAY_MONTH,
		/// Group dates by day and month, for example 22-Nov. The month is translated based on the spreadsheet locale.
		dayMonth = 9,
		MONTH,
		/// Group dates by month, for example Nov. The month is translated based on the spreadsheet locale.
		month = 10,
		QUARTER,
		/// Group dates by quarter, for example Q1 (which represents Jan-Mar).
		quarter = 11,
		YEAR,
		/// Group dates by year, for example 2008.
		year = 12,
		YEAR_MONTH,
		/// Group dates by year and month, for example 2008-Nov. The month is translated based on the spreadsheet locale.
		yearMonth = 13,
		YEAR_QUARTER,
		/// Group dates by year and quarter, for example 2008 Q4.
		yearQuarter = 14,
		YEAR_MONTH_DAY,
		/// Group dates by year, month, and day, for example 2008-11-22.
		yearMonthDay = 15,
	}

	///
	enum Type_7: ubyte {
		LINE_DASH_TYPE_UNSPECIFIED,
		/// Default value, do not use.
		lineDashTypeUnspecified = 0,
		INVISIBLE,
		/// No dash type, which is equivalent to a non-visible line.
		invisible = 1,
		CUSTOM,
		/// A custom dash for a line. Modifying the exact custom dash style is currently unsupported.
		custom = 2,
		SOLID,
		/// A solid line.
		solid = 3,
		DOTTED,
		/// A dotted line.
		dotted = 4,
		MEDIUM_DASHED,
		/// A dashed line where the dashes have "medium" length.
		mediumDashed = 5,
		MEDIUM_DASHED_DOTTED,
		/// A line that alternates between a "medium" dash and a dot.
		mediumDashedDotted = 6,
		LONG_DASHED,
		/// A dashed line where the dashes have "long" length.
		longDashed = 7,
		LONG_DASHED_DOTTED,
		/// A line that alternates between a "long" dash and a dot.
		longDashedDotted = 8,
	}

	///
	enum Type_8: ubyte {
		DATA_LABEL_TYPE_UNSPECIFIED,
		/// The data label type is not specified and will be interpreted depending on the context of the data label within the chart.
		dataLabelTypeUnspecified = 0,
		NONE,
		/// The data label is not displayed.
		none = 1,
		DATA,
		/// The data label is displayed using values from the series data.
		data = 2,
		CUSTOM,
		/// The data label is displayed using values from a custom data source indicated by customLabelData.
		custom = 3,
	}

	///
	enum Shape: ubyte {
		POINT_SHAPE_UNSPECIFIED,
		/// Default value.
		pointShapeUnspecified = 0,
		CIRCLE,
		/// A circle shape.
		circle = 1,
		DIAMOND,
		/// A diamond shape.
		diamond = 2,
		HEXAGON,
		/// A hexagon shape.
		hexagon = 3,
		PENTAGON,
		/// A pentagon shape.
		pentagon = 4,
		SQUARE,
		/// A square shape.
		square = 5,
		STAR,
		/// A star shape.
		star = 6,
		TRIANGLE,
		/// A triangle shape.
		triangle = 7,
		X_MARK,
		/// An x-mark shape.
		xMark = 8,
	}

	///
	enum LegendPosition_1: ubyte {
		PIE_CHART_LEGEND_POSITION_UNSPECIFIED,
		/// Default value, do not use.
		pieChartLegendPositionUnspecified = 0,
		BOTTOM_LEGEND,
		/// The legend is rendered on the bottom of the chart.
		bottomLegend = 1,
		LEFT_LEGEND,
		/// The legend is rendered on the left of the chart.
		leftLegend = 2,
		RIGHT_LEGEND,
		/// The legend is rendered on the right of the chart.
		rightLegend = 3,
		TOP_LEGEND,
		/// The legend is rendered on the top of the chart.
		topLegend = 4,
		NO_LEGEND,
		/// No legend is rendered.
		noLegend = 5,
		LABELED_LEGEND,
		/// Each pie slice has a label attached to it.
		labeledLegend = 6,
	}

	///
	enum LegendPosition_2: ubyte {
		BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED,
		/// Default value, do not use.
		bubbleChartLegendPositionUnspecified = 0,
		BOTTOM_LEGEND,
		/// The legend is rendered on the bottom of the chart.
		bottomLegend = 1,
		LEFT_LEGEND,
		/// The legend is rendered on the left of the chart.
		leftLegend = 2,
		RIGHT_LEGEND,
		/// The legend is rendered on the right of the chart.
		rightLegend = 3,
		TOP_LEGEND,
		/// The legend is rendered on the top of the chart.
		topLegend = 4,
		NO_LEGEND,
		/// No legend is rendered.
		noLegend = 5,
		INSIDE_LEGEND,
		/// The legend is rendered inside the chart area.
		insideLegend = 6,
	}

	///
	enum LegendPosition_3: ubyte {
		HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED,
		/// Default value, do not use.
		histogramChartLegendPositionUnspecified = 0,
		BOTTOM_LEGEND,
		/// The legend is rendered on the bottom of the chart.
		bottomLegend = 1,
		LEFT_LEGEND,
		/// The legend is rendered on the left of the chart.
		leftLegend = 2,
		RIGHT_LEGEND,
		/// The legend is rendered on the right of the chart.
		rightLegend = 3,
		TOP_LEGEND,
		/// The legend is rendered on the top of the chart.
		topLegend = 4,
		NO_LEGEND,
		/// No legend is rendered.
		noLegend = 5,
		INSIDE_LEGEND,
		/// The legend is rendered inside the chart area.
		insideLegend = 6,
	}

	///
	enum StackedType_1: ubyte {
		WATERFALL_STACKED_TYPE_UNSPECIFIED,
		/// Default value, do not use.
		waterfallStackedTypeUnspecified = 0,
		STACKED,
		/// Values corresponding to the same domain (horizontal axis) value will be stacked vertically.
		stacked = 1,
		SEQUENTIAL,
		/// Series will spread out along the horizontal axis.
		sequential = 2,
	}
}

///
enum _Xgafv: ubyte {
	/// v1 error format
	@(.name(`1`)) _1,
	/// v2 error format
	@(.name(`2`)) _2,
}

///
enum MajorDimension: ubyte {
	DIMENSION_UNSPECIFIED,
	/// The default value, do not use.
	dimensionUnspecified = 0,
	ROWS,
	/// Operates on the rows of a sheet.
	rows = 1,
	COLUMNS,
	/// Operates on the columns of a sheet.
	columns = 2,
}

///
enum ValueInputOption: ubyte {
	INPUT_VALUE_OPTION_UNSPECIFIED,
	/// Default input value. This value must not be used.
	inputValueOptionUnspecified = 0,
	RAW,
	/// The values the user has entered will not be parsed and will be stored as-is.
	raw = 1,
	USER_ENTERED,
	/// The values will be parsed as if the user typed them into the UI. Numbers will stay as numbers, but strings may be converted to numbers, dates, etc. following the same rules that are applied when entering text into a cell via the Google Sheets UI.
	userEntered = 2,
}

///
enum ResponseValueRenderOption: ubyte {
	FORMATTED_VALUE,
	/// Values will be calculated & formatted in the response according to the cell's formatting. Formatting is based on the spreadsheet's locale, not the requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return `"$1.23"`.
	formattedValue = 0,
	UNFORMATTED_VALUE,
	/// Values will be calculated, but not formatted in the reply. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return the number `1.23`.
	unformattedValue = 1,
	FORMULA,
	/// Values will not be calculated. The reply will include the formulas. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would return `"=A1"`. Sheets treats date and time values as decimal values. This lets you perform arithmetic on them in formulas. For more information on interpreting date and time values, see [About date & time values](https://developers.google.com/sheets/api/guides/formats#about_date_time_values).
	formula = 2,
}

///
enum ResponseDateTimeRenderOption: ubyte {
	SERIAL_NUMBER,
	/// Instructs date, time, datetime, and duration fields to be output as doubles in "serial number" format, as popularized by Lotus 1-2-3. The whole number portion of the value (left of the decimal) counts the days since December 30th 1899. The fractional portion (right of the decimal) counts the time as a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2 because it's 2 days after December 30th 1899, and .5 because noon is half a day. February 1st 1900 at 3pm would be 33.625. This correctly treats the year 1900 as not a leap year.
	serialNumber = 0,
	FORMATTED_STRING,
	/// Instructs date, time, datetime, and duration fields to be output as strings in their given number format (which depends on the spreadsheet locale).
	formattedString = 1,
}

///
enum LocationType: ubyte {
	DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED,
	/// Default value.
	developerMetadataLocationTypeUnspecified = 0,
	ROW,
	/// Developer metadata associated on an entire row dimension.
	row = 1,
	COLUMN,
	/// Developer metadata associated on an entire column dimension.
	column = 2,
	SHEET,
	/// Developer metadata associated on an entire sheet.
	sheet = 3,
	SPREADSHEET,
	/// Developer metadata associated on the entire spreadsheet.
	spreadsheet = 4,
}

///
enum LocationMatchingStrategy: ubyte {
	DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED,
	/// Default value. This value must not be used.
	developerMetadataLocationMatchingStrategyUnspecified = 0,
	EXACT_LOCATION,
	/// Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.
	exactLocation = 1,
	INTERSECTING_LOCATION,
	/// Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three.
	intersectingLocation = 2,
}

///
enum Visibility: ubyte {
	DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED,
	/// Default value.
	developerMetadataVisibilityUnspecified = 0,
	DOCUMENT,
	/// Document-visible metadata is accessible from any developer project with access to the document.
	document = 1,
	PROJECT,
	/// Project-visible metadata is only visible to and accessible by the developer project that created the metadata.
	project = 2,
}

///
enum AutoRecalc: ubyte {
	RECALCULATION_INTERVAL_UNSPECIFIED,
	/// Default value. This value must not be used.
	recalculationIntervalUnspecified = 0,
	ON_CHANGE,
	/// Volatile functions are updated on every change.
	onChange = 1,
	MINUTE,
	/// Volatile functions are updated on every change and every minute.
	minute = 2,
	HOUR,
	/// Volatile functions are updated on every change and hourly.
	hour = 3,
}

///
enum HorizontalAlignment: ubyte {
	HORIZONTAL_ALIGN_UNSPECIFIED,
	/// The horizontal alignment is not specified. Do not use this.
	horizontalAlignUnspecified = 0,
	LEFT,
	/// The text is explicitly aligned to the left of the cell.
	left = 1,
	CENTER,
	/// The text is explicitly aligned to the center of the cell.
	center = 2,
	RIGHT,
	/// The text is explicitly aligned to the right of the cell.
	right = 3,
}

///
enum VerticalAlignment: ubyte {
	VERTICAL_ALIGN_UNSPECIFIED,
	/// The vertical alignment is not specified. Do not use this.
	verticalAlignUnspecified = 0,
	TOP,
	/// The text is explicitly aligned to the top of the cell.
	top = 1,
	MIDDLE,
	/// The text is explicitly aligned to the middle of the cell.
	middle = 2,
	BOTTOM,
	/// The text is explicitly aligned to the bottom of the cell.
	bottom = 3,
}

///
enum WrapStrategy: ubyte {
	WRAP_STRATEGY_UNSPECIFIED,
	/// The default value, do not use.
	wrapStrategyUnspecified = 0,
	OVERFLOW_CELL,
	/// Lines that are longer than the cell width will be written in the next cell over, so long as that cell is empty. If the next cell over is non-empty, this behaves the same as `CLIP`. The text will never wrap to the next line unless the user manually inserts a new line. Example: | First sentence. | | Manual newline that is very long. <- Text continues into next cell | Next newline. |
	overflowCell = 1,
	LEGACY_WRAP,
	/// This wrap strategy represents the old Google Sheets wrap strategy where words that are longer than a line are clipped rather than broken. This strategy is not supported on all platforms and is being phased out. Example: | Cell has a | | loooooooooo| <- Word is clipped. | word. |
	legacyWrap = 2,
	CLIP,
	/// Lines that are longer than the cell width will be clipped. The text will never wrap to the next line unless the user manually inserts a new line. Example: | First sentence. | | Manual newline t| <- Text is clipped | Next newline. |
	clip = 3,
	WRAP,
	/// Words that are longer than a line are wrapped at the character level rather than clipped. Example: | Cell has a | | loooooooooo| <- Word is broken. | ong word. |
	wrap = 4,
}

///
enum TextDirection: ubyte {
	TEXT_DIRECTION_UNSPECIFIED,
	/// The text direction is not specified. Do not use this.
	textDirectionUnspecified = 0,
	LEFT_TO_RIGHT,
	/// The text direction of left-to-right was set by the user.
	leftToRight = 1,
	RIGHT_TO_LEFT,
	/// The text direction of right-to-left was set by the user.
	rightToLeft = 2,
}

///
enum HyperlinkDisplayType: ubyte {
	HYPERLINK_DISPLAY_TYPE_UNSPECIFIED,
	/// The default value: the hyperlink is rendered. Do not use this.
	hyperlinkDisplayTypeUnspecified = 0,
	LINKED,
	/// A hyperlink should be explicitly rendered.
	linked = 1,
	PLAIN_TEXT,
	/// A hyperlink should not be rendered.
	plainText = 2,
}

///
enum SheetType: ubyte {
	SHEET_TYPE_UNSPECIFIED,
	/// Default value, do not use.
	sheetTypeUnspecified = 0,
	GRID,
	/// The sheet is a grid.
	grid = 1,
	OBJECT,
	/// The sheet has no grid and instead has an object like a chart or image.
	object = 2,
	DATA_SOURCE,
	/// The sheet connects with an external DataSource and shows the preview of data.
	dataSource = 3,
}

///
enum ErrorCode: ubyte {
	DATA_EXECUTION_ERROR_CODE_UNSPECIFIED,
	/// Default value, do not use.
	dataExecutionErrorCodeUnspecified = 0,
	TIMED_OUT,
	/// The data execution timed out.
	timedOut = 1,
	TOO_MANY_ROWS,
	/// The data execution returns more rows than the limit.
	tooManyRows = 2,
	TOO_MANY_COLUMNS,
	/// The data execution returns more columns than the limit.
	tooManyColumns = 3,
	TOO_MANY_CELLS,
	/// The data execution returns more cells than the limit.
	tooManyCells = 4,
	ENGINE,
	/// Error is received from the backend data execution engine (e.g. BigQuery). Check error_message for details.
	engine = 5,
	PARAMETER_INVALID,
	/// One or some of the provided data source parameters are invalid.
	parameterInvalid = 6,
	UNSUPPORTED_DATA_TYPE,
	/// The data execution returns an unsupported data type.
	unsupportedDataType = 7,
	DUPLICATE_COLUMN_NAMES,
	/// The data execution returns duplicate column names or aliases.
	duplicateColumnNames = 8,
	INTERRUPTED,
	/// The data execution is interrupted. Please refresh later.
	interrupted = 9,
	CONCURRENT_QUERY,
	/// The data execution is currently in progress, can not be refreshed until it completes.
	concurrentQuery = 10,
	OTHER,
	/// Other errors.
	other = 11,
	TOO_MANY_CHARS_PER_CELL,
	/// The data execution returns values that exceed the maximum characters allowed in a single cell.
	tooManyCharsPerCell = 12,
	DATA_NOT_FOUND,
	/// The database referenced by the data source is not found. */
	dataNotFound = 13,
	PERMISSION_DENIED,
	/// The user does not have access to the database referenced by the data source.
	permissionDenied = 14,
	MISSING_COLUMN_ALIAS,
	/// The data execution returns columns with missing aliases.
	missingColumnAlias = 15,
	OBJECT_NOT_FOUND,
	/// The data source object does not exist.
	objectNotFound = 16,
	OBJECT_IN_ERROR_STATE,
	/// The data source object is currently in error state. To force refresh, set force in RefreshDataSourceRequest.
	objectInErrorState = 17,
	OBJECT_SPEC_INVALID,
	/// The data source object specification is invalid.
	objectSpecInvalid = 18,
}

///
enum RelativeDate: ubyte {
	RELATIVE_DATE_UNSPECIFIED,
	/// Default value, do not use.
	relativeDateUnspecified = 0,
	PAST_YEAR,
	/// The value is one year before today.
	pastYear = 1,
	PAST_MONTH,
	/// The value is one month before today.
	pastMonth = 2,
	PAST_WEEK,
	/// The value is one week before today.
	pastWeek = 3,
	YESTERDAY,
	/// The value is yesterday.
	yesterday = 4,
	TODAY,
	/// The value is today.
	today = 5,
	TOMORROW,
	/// The value is tomorrow.
	tomorrow = 6,
}

///
enum ValueLayout: ubyte {
	HORIZONTAL,
	/// Values are laid out horizontally (as columns).
	horizontal = 0,
	VERTICAL,
	/// Values are laid out vertically (as rows).
	vertical = 1,
}

///
enum SortOrder: ubyte {
	SORT_ORDER_UNSPECIFIED,
	/// Default value, do not use this.
	sortOrderUnspecified = 0,
	ASCENDING,
	/// Sort ascending.
	ascending = 1,
	DESCENDING,
	/// Sort descending.
	descending = 2,
}

///
enum SummarizeFunction: ubyte {
	PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED,
	/// The default, do not use.
	pivotStandardValueFunctionUnspecified = 0,
	SUM,
	/// Corresponds to the `SUM` function.
	sum = 1,
	COUNTA,
	/// Corresponds to the `COUNTA` function.
	counta = 2,
	COUNT,
	/// Corresponds to the `COUNT` function.
	count = 3,
	COUNTUNIQUE,
	/// Corresponds to the `COUNTUNIQUE` function.
	countunique = 4,
	AVERAGE,
	/// Corresponds to the `AVERAGE` function.
	average = 5,
	MAX,
	/// Corresponds to the `MAX` function.
	max_ = 6,
	MIN,
	/// Corresponds to the `MIN` function.
	min_ = 7,
	MEDIAN,
	/// Corresponds to the `MEDIAN` function.
	median = 8,
	PRODUCT,
	/// Corresponds to the `PRODUCT` function.
	product = 9,
	STDEV,
	/// Corresponds to the `STDEV` function.
	stdev = 10,
	STDEVP,
	/// Corresponds to the `STDEVP` function.
	stdevp = 11,
	VAR,
	/// Corresponds to the `VAR` function.
	var = 12,
	VARP,
	/// Corresponds to the `VARP` function.
	varp = 13,
	CUSTOM,
	/// Indicates the formula should be used as-is. Only valid if PivotValue.formula was set.
	custom = 14,
}

///
enum CalculatedDisplayType: ubyte {
	PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED,
	/// Default value, do not use.
	pivotValueCalculatedDisplayTypeUnspecified = 0,
	PERCENT_OF_ROW_TOTAL,
	/// Shows the pivot values as percentage of the row total values.
	percentOfRowTotal = 1,
	PERCENT_OF_COLUMN_TOTAL,
	/// Shows the pivot values as percentage of the column total values.
	percentOfColumnTotal = 2,
	PERCENT_OF_GRAND_TOTAL,
	/// Shows the pivot values as percentage of the grand total values.
	percentOfGrandTotal = 3,
}

///
enum ColumnSelectionType: ubyte {
	DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED,
	/// The default column selection type, do not use.
	dataSourceTableColumnSelectionTypeUnspecified = 0,
	SELECTED,
	/// Select columns specified by columns field.
	selected = 1,
	SYNC_ALL,
	/// Sync all current and future columns in the data source. If set, the data source table fetches all the columns in the data source at the time of refresh.
	syncAll = 2,
}

///
enum HiddenDimensionStrategy: ubyte {
	CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED,
	/// Default value, do not use.
	chartHiddenDimensionStrategyUnspecified = 0,
	SKIP_HIDDEN_ROWS_AND_COLUMNS,
	/// Charts will skip hidden rows and columns.
	skipHiddenRowsAndColumns = 1,
	SKIP_HIDDEN_ROWS,
	/// Charts will skip hidden rows only.
	skipHiddenRows = 2,
	SKIP_HIDDEN_COLUMNS,
	/// Charts will skip hidden columns only.
	skipHiddenColumns = 3,
	SHOW_ALL,
	/// Charts will not skip any hidden rows or columns.
	showAll = 4,
}

///
enum CompareMode: ubyte {
	BASIC_CHART_COMPARE_MODE_UNSPECIFIED,
	/// Default value, do not use.
	basicChartCompareModeUnspecified = 0,
	DATUM,
	/// Only the focused data element is highlighted and shown in the tooltip.
	datum = 1,
	CATEGORY,
	/// All data elements with the same category (e.g., domain value) are highlighted and shown in the tooltip.
	category = 2,
}

///
enum ViewWindowMode: ubyte {
	DEFAULT_VIEW_WINDOW_MODE,
	/// The default view window mode used in the Sheets editor for this chart type. In most cases, if set, the default mode is equivalent to `PRETTY`.
	defaultViewWindowMode = 0,
	VIEW_WINDOW_MODE_UNSUPPORTED,
	/// Do not use. Represents that the currently set mode is not supported by the API.
	viewWindowModeUnsupported = 1,
	EXPLICIT,
	/// Follows the min and max exactly if specified. If a value is unspecified, it will fall back to the `PRETTY` value.
	explicit = 2,
	PRETTY,
	/// Chooses a min and max that make the chart look good. Both min and max are ignored in this mode.
	pretty = 3,
}

///
enum AggregateType: ubyte {
	CHART_AGGREGATE_TYPE_UNSPECIFIED,
	/// Default value, do not use.
	chartAggregateTypeUnspecified = 0,
	AVERAGE,
	/// Average aggregate function.
	average = 1,
	COUNT,
	/// Count aggregate function.
	count = 2,
	MAX,
	/// Maximum aggregate function.
	max_ = 3,
	MEDIAN,
	/// Median aggregate function.
	median = 4,
	MIN,
	/// Minimum aggregate function.
	min_ = 5,
	SUM,
	/// Sum aggregate function.
	sum = 6,
}

///
enum Placement: ubyte {
	DATA_LABEL_PLACEMENT_UNSPECIFIED,
	/// The positioning is determined automatically by the renderer.
	dataLabelPlacementUnspecified = 0,
	CENTER,
	/// Center within a bar or column, both horizontally and vertically.
	center = 1,
	LEFT,
	/// To the left of a data point.
	left = 2,
	RIGHT,
	/// To the right of a data point.
	right = 3,
	ABOVE,
	/// Above a data point.
	above = 4,
	BELOW,
	/// Below a data point.
	below = 5,
	INSIDE_END,
	/// Inside a bar or column at the end (top if positive, bottom if negative).
	insideEnd = 6,
	INSIDE_BASE,
	/// Inside a bar or column at the base.
	insideBase = 7,
	OUTSIDE_END,
	/// Outside a bar or column at the end.
	outsideEnd = 8,
}

///
enum NodeSize: ubyte {
	ORG_CHART_LABEL_SIZE_UNSPECIFIED,
	/// Default value, do not use.
	orgChartLabelSizeUnspecified = 0,
	SMALL,
	/// The small org chart node size.
	small = 1,
	MEDIUM,
	/// The medium org chart node size.
	medium = 2,
	LARGE,
	/// The large org chart node size.
	large = 3,
}

///
enum NumberFormatSource: ubyte {
	CHART_NUMBER_FORMAT_SOURCE_UNDEFINED,
	/// Default value, do not use.
	chartNumberFormatSourceUndefined = 0,
	FROM_DATA,
	/// Inherit number formatting from data.
	fromData = 1,
	CUSTOM,
	/// Apply custom formatting as specified by ChartCustomNumberFormatOptions.
	custom = 2,
}

///
enum ComparisonType: ubyte {
	COMPARISON_TYPE_UNDEFINED,
	/// Default value, do not use.
	comparisonTypeUndefined = 0,
	ABSOLUTE_DIFFERENCE,
	/// Use absolute difference between key and baseline value.
	absoluteDifference = 1,
	PERCENTAGE_DIFFERENCE,
	/// Use percentage difference between key and baseline value.
	percentageDifference = 2,
}

///
enum RefreshScope: ubyte {
	DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED,
	/// Default value, do not use.
	dataSourceRefreshScopeUnspecified = 0,
	ALL_DATA_SOURCES,
	/// Refreshes all data sources and their associated data source objects in the spreadsheet.
	allDataSources = 1,
}

///
enum DaysOfWeek: ubyte {
	DAY_OF_WEEK_UNSPECIFIED,
	/// The day of the week is unspecified.
	dayOfWeekUnspecified = 0,
	MONDAY,
	/// Monday
	monday = 1,
	TUESDAY,
	/// Tuesday
	tuesday = 2,
	WEDNESDAY,
	/// Wednesday
	wednesday = 3,
	THURSDAY,
	/// Thursday
	thursday = 4,
	FRIDAY,
	/// Friday
	friday = 5,
	SATURDAY,
	/// Saturday
	saturday = 6,
	SUNDAY,
	/// Sunday
	sunday = 7,
}

///
enum PasteType: ubyte {
	PASTE_NORMAL,
	/// Paste values, formulas, formats, and merges.
	pasteNormal = 0,
	PASTE_VALUES,
	/// Paste the values ONLY without formats, formulas, or merges.
	pasteValues = 1,
	PASTE_FORMAT,
	/// Paste the format and data validation only.
	pasteFormat = 2,
	PASTE_NO_BORDERS,
	/// Like `PASTE_NORMAL` but without borders.
	pasteNoBorders = 3,
	PASTE_FORMULA,
	/// Paste the formulas only.
	pasteFormula = 4,
	PASTE_DATA_VALIDATION,
	/// Paste the data validation only.
	pasteDataValidation = 5,
	PASTE_CONDITIONAL_FORMATTING,
	/// Paste the conditional formatting rules only.
	pasteConditionalFormatting = 6,
}

///
enum PasteOrientation: ubyte {
	NORMAL,
	/// Paste normally.
	normal = 0,
	TRANSPOSE,
	/// Paste transposed, where all rows become columns and vice versa.
	transpose = 1,
}

///
enum MergeType: ubyte {
	MERGE_ALL,
	/// Create a single merge from the range
	mergeAll = 0,
	MERGE_COLUMNS,
	/// Create a merge for each column in the range
	mergeColumns = 1,
	MERGE_ROWS,
	/// Create a merge for each row in the range
	mergeRows = 2,
}

///
enum DelimiterType: ubyte {
	DELIMITER_TYPE_UNSPECIFIED,
	/// Default value. This value must not be used.
	delimiterTypeUnspecified = 0,
	COMMA,
	/// ","
	comma = 1,
	SEMICOLON,
	/// ";"
	semicolon = 2,
	PERIOD,
	/// "."
	period = 3,
	SPACE,
	/// " "
	space = 4,
	CUSTOM,
	/// A custom value as defined in delimiter.
	custom = 5,
	AUTODETECT,
	/// Automatically detect columns.
	autodetect = 6,
}

///
enum InsertDataOption: ubyte {
	OVERWRITE,
	/// The new data overwrites existing data in the areas it is written. (Note: adding data to the end of the sheet will still insert new rows or columns so the data can be written.)
	overwrite = 0,
	INSERT_ROWS,
	/// Rows are inserted for the new data.
	insertRows = 1,
}

/// Data within a range of the spreadsheet.
struct ValueRange {
@optional:
	/// The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
	@byName MajorDimension majorDimension;
	alias MajorDimension = .MajorDimension; /// ditto
	/// The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
	@embedNullable Nullable!string range;
	/// The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
	Json[ ][ ] values;
}

/// The response when updating a range of values in a spreadsheet.
struct UpdateValuesResponse {
	/// The values of the cells after updates were applied. This is only included if the request's `includeValuesInResponse` field was `true`.
	@optional ValueRange updatedData;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
	/// The number of cells updated.
	@embedNullable Nullable!int updatedCells;
	/// The number of columns where at least one cell in the column was updated.
	@embedNullable Nullable!int updatedColumns;
	/// The range (in A1 notation) that updates were applied to.
	@embedNullable Nullable!string updatedRange;
	/// The number of rows where at least one cell in the row was updated.
	@embedNullable Nullable!int updatedRows;
}

/// The response when updating a range of values in a spreadsheet.
struct AppendValuesResponse {
	/// Information about the updates that were applied.
	@optional UpdateValuesResponse updates;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
	/// The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
	@embedNullable Nullable!string tableRange;
}

/// The request for clearing a range of values in a spreadsheet.
struct ClearValuesRequest {
}

/// The response when clearing a range of values in a spreadsheet.
struct ClearValuesResponse {
	/// The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger than the bounds of the sheet, this will be the actual range that was cleared, bounded to the sheet's limits.)
	@embedNullable Nullable!string clearedRange;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
}

/// The response when retrieving more than one range of values in a spreadsheet.
struct BatchGetValuesResponse {
	/// The ID of the spreadsheet the data was retrieved from.
	@embedNullable Nullable!string spreadsheetId;
	/// The requested values. The order of the ValueRanges is the same as the order of the requested ranges.
	@optional ValueRange[ ] valueRanges;
}

/// The request for updating more than one range of values in a spreadsheet.
struct BatchUpdateValuesRequest {
@optional:
	/// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
	Ternary includeValuesInResponse;
	/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName ResponseDateTimeRenderOption responseDateTimeRenderOption;
	alias ResponseDateTimeRenderOption = .ResponseDateTimeRenderOption; /// ditto
	/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
	@byName ResponseValueRenderOption responseValueRenderOption;
	alias ResponseValueRenderOption = .ResponseValueRenderOption; /// ditto
	/// How the input data should be interpreted.
	@byName ValueInputOption valueInputOption;
	alias ValueInputOption = .ValueInputOption; /// ditto
	/// The new values to apply to the spreadsheet.
	ValueRange[ ] data;
}

/// The response when updating a range of values in a spreadsheet.
struct BatchUpdateValuesResponse {
	/// One UpdateValuesResponse per requested range, in the same order as the requests appeared.
	@optional UpdateValuesResponse[ ] responses;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
	/// The total number of cells updated.
	@embedNullable Nullable!int totalUpdatedCells;
	/// The total number of columns where at least one cell in the column was updated.
	@embedNullable Nullable!int totalUpdatedColumns;
	/// The total number of rows where at least one cell in the row was updated.
	@embedNullable Nullable!int totalUpdatedRows;
	/// The total number of sheets where at least one cell in the sheet was updated.
	@embedNullable Nullable!int totalUpdatedSheets;
}

/// The request for clearing more than one range of values in a spreadsheet.
struct BatchClearValuesRequest {
	/// The ranges to clear, in [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell).
	@optional string[ ] ranges;
}

/// The response when clearing a range of values in a spreadsheet.
struct BatchClearValuesResponse {
	/// The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
	@optional string[ ] clearedRanges;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
}

/// The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
struct BatchGetValuesByDataFilterRequest {
@optional:
	/// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName DateTimeRenderOption dateTimeRenderOption;
	alias DateTimeRenderOption = .ResponseDateTimeRenderOption; /// ditto
	/// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
	@byName MajorDimension majorDimension;
	alias MajorDimension = .MajorDimension; /// ditto
	/// How values should be represented in the output. The default render option is FORMATTED_VALUE.
	@byName ValueRenderOption valueRenderOption;
	alias ValueRenderOption = .ResponseValueRenderOption; /// ditto
	/// The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.
	DataFilter[ ] dataFilters;
}

/// Filter that describes what data should be selected or returned from a request.
struct DataFilter {
@optional:
	/// Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup.
	DeveloperMetadataLookup developerMetadataLookup;
	/// Selects data that matches the range described by the GridRange.
	GridRange gridRange;
	/// Selects data that matches the specified A1 range.
	@embedNullable Nullable!string a1Range;
}

/// Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
struct DeveloperMetadataLookup {
@optional:
	/// Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy.
	DeveloperMetadataLocation metadataLocation;
	/// Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
	@byName LocationMatchingStrategy locationMatchingStrategy;
	alias LocationMatchingStrategy = .LocationMatchingStrategy; /// ditto
	/// Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
	@byName LocationType locationType;
	alias LocationType = .LocationType; /// ditto
	/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
	@byName Visibility visibility;
	alias Visibility = .Visibility; /// ditto
	/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
	@embedNullable Nullable!int metadataId;
	/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
	@embedNullable Nullable!string metadataKey;
	/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
	@embedNullable Nullable!string metadataValue;
}

/// A location where metadata may be associated in a spreadsheet.
struct DeveloperMetadataLocation {
@optional:
	/// Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns.
	DimensionRange dimensionRange;
	/// The type of location this object represents. This field is read-only.
	@byName LocationType locationType;
	alias LocationType = .LocationType; /// ditto
	/// True when metadata is associated with an entire spreadsheet.
	Ternary spreadsheet;
	/// The ID of the sheet when metadata is associated with an entire sheet.
	@embedNullable Nullable!int sheetId;
}

/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
struct DimensionRange {
	/// The dimension of the span.
	@optional @byName Dimension dimension;
	alias Dimension = .MajorDimension; /// ditto
	/// The end (exclusive) of the span, or not set if unbounded.
	@embedNullable Nullable!int endIndex;
	/// The sheet this span is on.
	@embedNullable Nullable!int sheetId;
	/// The start (inclusive) of the span, or not set if unbounded.
	@embedNullable Nullable!int startIndex;
}

/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
struct GridRange {
	/// The end column (exclusive) of the range, or not set if unbounded.
	@embedNullable Nullable!int endColumnIndex;
	/// The end row (exclusive) of the range, or not set if unbounded.
	@embedNullable Nullable!int endRowIndex;
	/// The sheet this range is on.
	@embedNullable Nullable!int sheetId;
	/// The start column (inclusive) of the range, or not set if unbounded.
	@embedNullable Nullable!int startColumnIndex;
	/// The start row (inclusive) of the range, or not set if unbounded.
	@embedNullable Nullable!int startRowIndex;
}

/// The response when retrieving more than one range of values in a spreadsheet selected by DataFilters.
struct BatchGetValuesByDataFilterResponse {
	/// The ID of the spreadsheet the data was retrieved from.
	@embedNullable Nullable!string spreadsheetId;
	/// The requested values with the list of data filters that matched them.
	@optional MatchedValueRange[ ] valueRanges;
}

/// A value range that was matched by one or more data filers.
struct MatchedValueRange {
@optional:
	/// The values matched by the DataFilter.
	ValueRange valueRange;
	/// The DataFilters from the request that matched the range of values.
	DataFilter[ ] dataFilters;
}

/// The request for updating more than one range of values in a spreadsheet.
struct BatchUpdateValuesByDataFilterRequest {
@optional:
	/// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
	Ternary includeValuesInResponse;
	/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName ResponseDateTimeRenderOption responseDateTimeRenderOption;
	alias ResponseDateTimeRenderOption = .ResponseDateTimeRenderOption; /// ditto
	/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
	@byName ResponseValueRenderOption responseValueRenderOption;
	alias ResponseValueRenderOption = .ResponseValueRenderOption; /// ditto
	/// How the input data should be interpreted.
	@byName ValueInputOption valueInputOption;
	alias ValueInputOption = .ValueInputOption; /// ditto
	/// The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.
	DataFilterValueRange[ ] data;
}

/// A range of values whose location is specified by a DataFilter.
struct DataFilterValueRange {
@optional:
	/// The data filter describing the location of the values in the spreadsheet.
	DataFilter dataFilter;
	/// The major dimension of the values.
	@byName MajorDimension majorDimension;
	alias MajorDimension = .MajorDimension; /// ditto
	/// The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.
	Json[ ][ ] values;
}

/// The response when updating a range of values in a spreadsheet.
struct BatchUpdateValuesByDataFilterResponse {
	/// The response for each range updated.
	@optional UpdateValuesByDataFilterResponse[ ] responses;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
	/// The total number of cells updated.
	@embedNullable Nullable!int totalUpdatedCells;
	/// The total number of columns where at least one cell in the column was updated.
	@embedNullable Nullable!int totalUpdatedColumns;
	/// The total number of rows where at least one cell in the row was updated.
	@embedNullable Nullable!int totalUpdatedRows;
	/// The total number of sheets where at least one cell in the sheet was updated.
	@embedNullable Nullable!int totalUpdatedSheets;
}

/// The response when updating a range of values by a data filter in a spreadsheet.
struct UpdateValuesByDataFilterResponse {
@optional:
	/// The data filter that selected the range that was updated.
	DataFilter dataFilter;
	/// The values of the cells in the range matched by the dataFilter after all updates were applied. This is only included if the request's `includeValuesInResponse` field was `true`.
	ValueRange updatedData;
	/// The number of cells updated.
	@embedNullable Nullable!int updatedCells;
	/// The number of columns where at least one cell in the column was updated.
	@embedNullable Nullable!int updatedColumns;
	/// The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.
	@embedNullable Nullable!string updatedRange;
	/// The number of rows where at least one cell in the row was updated.
	@embedNullable Nullable!int updatedRows;
}

/// The request for clearing more than one range selected by a DataFilter in a spreadsheet.
struct BatchClearValuesByDataFilterRequest {
	/// The DataFilters used to determine which ranges to clear.
	@optional DataFilter[ ] dataFilters;
}

/// The response when clearing a range of values selected with DataFilters in a spreadsheet.
struct BatchClearValuesByDataFilterResponse {
	/// The ranges that were cleared, in [A1 notation](/sheets/api/guides/concepts#cell). If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
	@optional string[ ] clearedRanges;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
}

/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
struct DeveloperMetadata {
@optional:
	/// The location where the metadata is associated.
	DeveloperMetadataLocation location;
	/// The metadata visibility. Developer metadata must always have a visibility specified.
	@byName Visibility visibility;
	alias Visibility = .Visibility; /// ditto
	/// The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
	@embedNullable Nullable!int metadataId;
	/// The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.
	@embedNullable Nullable!string metadataKey;
	/// Data associated with the metadata's key.
	@embedNullable Nullable!string metadataValue;
}

/// A request to retrieve all developer metadata matching the set of specified criteria.
struct SearchDeveloperMetadataRequest {
	/// The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response.
	@optional DataFilter[ ] dataFilters;
}

/// A reply to a developer metadata search request.
struct SearchDeveloperMetadataResponse {
	/// The metadata matching the criteria of the search request.
	@optional MatchedDeveloperMetadata[ ] matchedDeveloperMetadata;
}

/// A developer metadata entry and the data filters specified in the original request that matched it.
struct MatchedDeveloperMetadata {
@optional:
	/// The developer metadata matching the specified filters.
	DeveloperMetadata developerMetadata;
	/// All filters matching the returned developer metadata.
	DataFilter[ ] dataFilters;
}

/// Resource that represents a spreadsheet.
struct Spreadsheet {
@optional:
	/// Overall properties of a spreadsheet.
	SpreadsheetProperties properties;
	/// Output only. A list of data source refresh schedules.
	@readOnly DataSourceRefreshSchedule[ ] dataSourceSchedules;
	/// A list of external data sources connected with the spreadsheet.
	DataSource[ ] dataSources;
	/// The developer metadata associated with a spreadsheet.
	DeveloperMetadata[ ] developerMetadata;
	/// The named ranges defined in a spreadsheet.
	NamedRange[ ] namedRanges;
	/// The sheets that are part of a spreadsheet.
	Sheet[ ] sheets;
	/// The ID of the spreadsheet. This field is read-only.
	@embedNullable Nullable!string spreadsheetId;
	/// The url of the spreadsheet. This field is read-only.
	@embedNullable Nullable!string spreadsheetUrl;
}

/// Properties of a spreadsheet.
struct SpreadsheetProperties {
@optional:
	/// The default format of all cells in the spreadsheet. CellData.effectiveFormat will not be set if the cell's format is equal to this default format. This field is read-only.
	CellFormat defaultFormat;
	/// Determines whether and how circular references are resolved with iterative calculation. Absence of this field means that circular references result in calculation errors.
	IterativeCalculationSettings iterativeCalculationSettings;
	/// Theme applied to the spreadsheet.
	SpreadsheetTheme spreadsheetTheme;
	/// The amount of time to wait before volatile functions are recalculated.
	@byName AutoRecalc autoRecalc;
	alias AutoRecalc = .AutoRecalc; /// ditto
	/// The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.
	@embedNullable Nullable!string locale;
	/// The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
	@embedNullable Nullable!string timeZone;
	/// The title of the spreadsheet.
	@embedNullable Nullable!string title;
}

/// The format of a cell.
struct CellFormat {
@optional:
	/// The background color of the cell. Deprecated: Use background_color_style.
	Color backgroundColor;
	/// The background color of the cell. If background_color is also set, this field takes precedence.
	ColorStyle backgroundColorStyle;
	/// The borders of the cell.
	Borders borders;
	/// A format describing how number values should be represented to the user.
	NumberFormat numberFormat;
	/// The padding of the cell.
	Padding padding;
	/// The format of the text in the cell (unless overridden by a format run). Setting a cell-level link here clears the cell's existing links. Setting the link field in a TextFormatRun takes precedence over the cell-level link.
	TextFormat textFormat;
	/// The rotation applied to text in the cell.
	TextRotation textRotation;
	/// The horizontal alignment of the value in the cell.
	@byName HorizontalAlignment horizontalAlignment;
	alias HorizontalAlignment = .HorizontalAlignment; /// ditto
	/// If one exists, how a hyperlink should be displayed in the cell.
	@byName HyperlinkDisplayType hyperlinkDisplayType;
	alias HyperlinkDisplayType = .HyperlinkDisplayType; /// ditto
	/// The direction of the text in the cell.
	@byName TextDirection textDirection;
	alias TextDirection = .TextDirection; /// ditto
	/// The vertical alignment of the value in the cell.
	@byName VerticalAlignment verticalAlignment;
	alias VerticalAlignment = .VerticalAlignment; /// ditto
	/// The wrap strategy for the value in the cell.
	@byName WrapStrategy wrapStrategy;
	alias WrapStrategy = .WrapStrategy; /// ditto
}

/// The number format of a cell.
struct NumberFormat {
	/// The type of the number format. When writing, this field must be set.
	@optional @byName Type type;
	alias Type = P.Type_0; /// ditto
	/// Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
	@embedNullable Nullable!string pattern;
}

/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
struct Color {
@optional:
	/// The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
	float alpha;
	/// The amount of blue in the color as a value in the interval [0, 1].
	float blue;
	/// The amount of green in the color as a value in the interval [0, 1].
	float green;
	/// The amount of red in the color as a value in the interval [0, 1].
	float red;
}

/// A color value.
struct ColorStyle {
@optional:
	/// RGB color. The [`alpha`](/sheets/api/reference/rest/v4/spreadsheets/other#Color.FIELDS.alpha) value in the [`Color`](/sheets/api/reference/rest/v4/spreadsheets/other#color) object isn't generally supported.
	Color rgbColor;
	/// Theme color.
	@byName ThemeColor themeColor;
	alias ThemeColor = P.ThemeColor; /// ditto
}

/// The borders of the cell.
struct Borders {
@optional:
	/// The bottom border of the cell.
	Border bottom;
	/// The left border of the cell.
	Border left;
	/// The right border of the cell.
	Border right;
	/// The top border of the cell.
	Border top;
}

/// A border along a cell.
struct Border {
@optional:
	/// The color of the border. Deprecated: Use color_style.
	Color color;
	/// The color of the border. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
	/// The style of the border.
	@byName Style style;
	alias Style = P.Style; /// ditto
	/// The width of the border, in pixels. Deprecated; the width is determined by the "style" field.
	@embedNullable Nullable!int width;
}

/// The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
struct Padding {
	/// The bottom padding of the cell.
	@embedNullable Nullable!int bottom;
	/// The left padding of the cell.
	@embedNullable Nullable!int left;
	/// The right padding of the cell.
	@embedNullable Nullable!int right;
	/// The top padding of the cell.
	@embedNullable Nullable!int top;
}

/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
struct TextFormat {
@optional:
	/// The foreground color of the text. Deprecated: Use foreground_color_style.
	Color foregroundColor;
	/// The foreground color of the text. If foreground_color is also set, this field takes precedence.
	ColorStyle foregroundColorStyle;
	/// The link destination of the text, if any. Setting the link field in a TextFormatRun will clear the cell's existing links or a cell-level link set in the same request. When a link is set, the text foreground color will be set to the default link color and the text will be underlined. If these fields are modified in the same request, those values will be used instead of the link defaults.
	Link link;
	/// True if the text is bold.
	Ternary bold;
	/// True if the text is italicized.
	Ternary italic;
	/// True if the text has a strikethrough.
	Ternary strikethrough;
	/// True if the text is underlined.
	Ternary underline;
	/// The font family.
	@embedNullable Nullable!string fontFamily;
	/// The size of the font.
	@embedNullable Nullable!int fontSize;
}

/// An external or local reference.
struct Link {
	/// The link identifier.
	@embedNullable Nullable!string uri;
}

/// The rotation applied to text in a cell.
struct TextRotation {
	/// If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l |
	@optional Ternary vertical;
	/// The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
	@embedNullable Nullable!int angle;
}

/// Settings to control how circular dependencies are resolved with iterative calculation.
struct IterativeCalculationSettings {
	/// When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
	@optional double convergenceThreshold;
	/// When iterative calculation is enabled, the maximum number of calculation rounds to perform.
	@embedNullable Nullable!int maxIterations;
}

/// Represents spreadsheet theme
struct SpreadsheetTheme {
	/// Name of the primary font family.
	@embedNullable Nullable!string primaryFontFamily;
	/// The spreadsheet theme color pairs. To update you must provide all theme color pairs.
	@optional ThemeColorPair[ ] themeColors;
}

/// A pair mapping a spreadsheet theme color type to the concrete color it represents.
struct ThemeColorPair {
@optional:
	/// The concrete color corresponding to the theme color type.
	ColorStyle color;
	/// The type of the spreadsheet theme color.
	@byName ColorType colorType;
	alias ColorType = P.ThemeColor; /// ditto
}

/// A sheet in a spreadsheet.
struct Sheet {
@optional:
	/// The filter on this sheet, if any.
	BasicFilter basicFilter;
	/// The properties of the sheet.
	SheetProperties properties;
	/// The banded (alternating colors) ranges on this sheet.
	BandedRange[ ] bandedRanges;
	/// The specifications of every chart on this sheet.
	EmbeddedChart[ ] charts;
	/// All column groups on this sheet, ordered by increasing range start index, then by group depth.
	DimensionGroup[ ] columnGroups;
	/// The conditional format rules in this sheet.
	ConditionalFormatRule[ ] conditionalFormats;
	/// Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
	GridData[ ] data;
	/// The developer metadata associated with a sheet.
	DeveloperMetadata[ ] developerMetadata;
	/// The filter views in this sheet.
	FilterView[ ] filterViews;
	/// The ranges that are merged together.
	GridRange[ ] merges;
	/// The protected ranges in this sheet.
	ProtectedRange[ ] protectedRanges;
	/// All row groups on this sheet, ordered by increasing range start index, then by group depth.
	DimensionGroup[ ] rowGroups;
	/// The slicers on this sheet.
	Slicer[ ] slicers;
}

/// Properties of a sheet.
struct SheetProperties {
@optional:
	/// Output only. If present, the field contains DATA_SOURCE sheet specific properties.
	@readOnly DataSourceSheetProperties dataSourceSheetProperties;
	/// Additional properties of the sheet if this sheet is a grid. (If the sheet is an object sheet, containing a chart or image, then this field will be absent.) When writing it is an error to set any grid properties on non-grid sheets. If this sheet is a DATA_SOURCE sheet, this field is output only but contains the properties that reflect how a data source sheet is rendered in the UI, e.g. row_count.
	GridProperties gridProperties;
	/// The color of the tab in the UI. Deprecated: Use tab_color_style.
	Color tabColor;
	/// The color of the tab in the UI. If tab_color is also set, this field takes precedence.
	ColorStyle tabColorStyle;
	/// True if the sheet is hidden in the UI, false if it's visible.
	Ternary hidden;
	/// True if the sheet is an RTL sheet instead of an LTR sheet.
	Ternary rightToLeft;
	/// The type of sheet. Defaults to GRID. This field cannot be changed once set.
	@byName SheetType sheetType;
	alias SheetType = .SheetType; /// ditto
	/// The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in "before the move" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
	@embedNullable Nullable!int index;
	/// The ID of the sheet. Must be non-negative. This field cannot be changed once set.
	@embedNullable Nullable!int sheetId;
	/// The name of the sheet.
	@embedNullable Nullable!string title;
}

/// Properties of a grid.
struct GridProperties {
@optional:
	/// True if the column grouping control toggle is shown after the group.
	Ternary columnGroupControlAfter;
	/// True if the grid isn't showing gridlines in the UI.
	Ternary hideGridlines;
	/// True if the row grouping control toggle is shown after the group.
	Ternary rowGroupControlAfter;
	/// The number of columns in the grid.
	@embedNullable Nullable!int columnCount;
	/// The number of columns that are frozen in the grid.
	@embedNullable Nullable!int frozenColumnCount;
	/// The number of rows that are frozen in the grid.
	@embedNullable Nullable!int frozenRowCount;
	/// The number of rows in the grid.
	@embedNullable Nullable!int rowCount;
}

/// Additional properties of a DATA_SOURCE sheet.
struct DataSourceSheetProperties {
@optional:
	/// The data execution status.
	DataExecutionStatus dataExecutionStatus;
	/// The columns displayed on the sheet, corresponding to the values in RowData.
	DataSourceColumn[ ] columns;
	/// ID of the DataSource the sheet is connected to.
	@embedNullable Nullable!string dataSourceId;
}

/// A column in a data source.
struct DataSourceColumn {
	/// The column reference.
	@optional DataSourceColumnReference reference;
	/// The formula of the calculated column.
	@embedNullable Nullable!string formula;
}

/// An unique identifier that references a data source column.
struct DataSourceColumnReference {
	/// The display name of the column. It should be unique within a data source.
	@embedNullable Nullable!string name;
}

/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
struct DataExecutionStatus {
@optional:
	/// The error code.
	@byName ErrorCode errorCode;
	alias ErrorCode = .ErrorCode; /// ditto
	/// The state of the data execution.
	@byName State state;
	alias State = P.State; /// ditto
	/// The error message, which may be empty.
	@embedNullable Nullable!string errorMessage;
	/// Gets the time the data last successfully refreshed.
	@embedNullable @dateTime Nullable!string lastRefreshTime;
}

/// Data in the grid, as well as metadata about the dimensions.
struct GridData {
@optional:
	/// Metadata about the requested columns in the grid, starting with the column in start_column.
	DimensionProperties[ ] columnMetadata;
	/// The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
	RowData[ ] rowData;
	/// Metadata about the requested rows in the grid, starting with the row in start_row.
	DimensionProperties[ ] rowMetadata;
	/// The first column this GridData refers to, zero-based.
	@embedNullable Nullable!int startColumn;
	/// The first row this GridData refers to, zero-based.
	@embedNullable Nullable!int startRow;
}

/// Data about each cell in a row.
struct RowData {
	/// The values in the row, one per column.
	@optional CellData[ ] values;
}

/// Data about a specific cell.
struct CellData {
@optional:
	/// Output only. Information about a data source formula on the cell. The field is set if user_entered_value is a formula referencing some DATA_SOURCE sheet, e.g. `=SUM(DataSheet!Column)`.
	@readOnly DataSourceFormula dataSourceFormula;
	/// A data source table anchored at this cell. The size of data source table itself is computed dynamically based on its configuration. Only the first cell of the data source table contains the data source table definition. The other cells will contain the display values of the data source table result in their effective_value fields.
	DataSourceTable dataSourceTable;
	/// A data validation rule on the cell, if any. When writing, the new data validation rule will overwrite any prior rule.
	DataValidationRule dataValidation;
	/// The effective format being used by the cell. This includes the results of applying any conditional formatting and, if the cell contains a formula, the computed number format. If the effective format is the default format, effective format will not be written. This field is read-only.
	CellFormat effectiveFormat;
	/// The effective value of the cell. For cells with formulas, this is the calculated value. For cells with literals, this is the same as the user_entered_value. This field is read-only.
	ExtendedValue effectiveValue;
	/// A pivot table anchored at this cell. The size of pivot table itself is computed dynamically based on its data, grouping, filters, values, etc. Only the top-left cell of the pivot table contains the pivot table definition. The other cells will contain the calculated values of the results of the pivot in their effective_value fields.
	PivotTable pivotTable;
	/// The format the user entered for the cell. When writing, the new format will be merged with the existing format.
	CellFormat userEnteredFormat;
	/// The value the user entered in the cell. e.g., `1234`, `'Hello'`, or `=NOW()` Note: Dates, Times and DateTimes are represented as doubles in serial number format.
	ExtendedValue userEnteredValue;
	/// The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
	@embedNullable Nullable!string formattedValue;
	/// A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
	@embedNullable Nullable!string hyperlink;
	/// Any note on the cell.
	@embedNullable Nullable!string note;
	/// Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
	TextFormatRun[ ] textFormatRuns;
}

/// The kinds of value that a cell in a spreadsheet can have.
struct ExtendedValue {
@optional:
	/// Represents an error. This field is read-only.
	ErrorValue errorValue;
	/// Represents a boolean value.
	Ternary boolValue;
	/// Represents a formula.
	@embedNullable Nullable!string formulaValue;
	/// Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.
	double numberValue;
	/// Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `"123"`.
	@embedNullable Nullable!string stringValue;
}

/// An error in a cell.
struct ErrorValue {
	/// The type of error.
	@optional @byName Type type;
	alias Type = P.Type_1; /// ditto
	/// A message with more information about the error (in the spreadsheet's locale).
	@embedNullable Nullable!string message;
}

/// A run of a text format. The format of this run continues until the start index of the next run. When updating, all fields must be set.
struct TextFormatRun {
	/// The format of this run. Absent values inherit the cell's format.
	@optional TextFormat format;
	/// The zero-based character index where this run starts, in UTF-16 code units.
	@embedNullable Nullable!int startIndex;
}

/// A data validation rule.
struct DataValidationRule {
@optional:
	/// The condition that data in the cell must match.
	BooleanCondition condition;
	/// True if the UI should be customized based on the kind of condition. If true, "List" conditions will show a dropdown.
	Ternary showCustomUi;
	/// True if invalid data should be rejected.
	Ternary strict;
	/// A message to show the user when adding data to the cell.
	@embedNullable Nullable!string inputMessage;
}

/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
struct BooleanCondition {
@optional:
	/// The type of condition.
	@byName Type type;
	alias Type = P.Type_2; /// ditto
	/// The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
	ConditionValue[ ] values;
}

/// The value of the condition.
struct ConditionValue {
	/// A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
	@optional @byName RelativeDate relativeDate;
	alias RelativeDate = .RelativeDate; /// ditto
	/// A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
	@embedNullable Nullable!string userEnteredValue;
}

/// A pivot table.
struct PivotTable {
@optional:
	/// Output only. The data execution status for data source pivot tables.
	@readOnly DataExecutionStatus dataExecutionStatus;
	/// The range the pivot table is reading data from.
	GridRange source;
	/// Whether values should be listed horizontally (as columns) or vertically (as rows).
	@byName ValueLayout valueLayout;
	alias ValueLayout = .ValueLayout; /// ditto
	/// Each column grouping in the pivot table.
	PivotGroup[ ] columns;
	/// An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
	PivotFilterCriteria[string] criteria;
	/// The ID of the data source the pivot table is reading data from.
	@embedNullable Nullable!string dataSourceId;
	/// The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
	PivotFilterSpec[ ] filterSpecs;
	/// Each row grouping in the pivot table.
	PivotGroup[ ] rows;
	/// A list of values to include in the pivot table.
	PivotValue[ ] values;
}

/// A single grouping (either row or column) in a pivot table.
struct PivotGroup {
@optional:
	/// The reference to the data source column this grouping is based on.
	DataSourceColumnReference dataSourceColumnReference;
	/// The count limit on rows or columns to apply to this pivot group.
	PivotGroupLimit groupLimit;
	/// The group rule to apply to this row/column group.
	PivotGroupRule groupRule;
	/// The bucket of the opposite pivot group to sort by. If not specified, sorting is alphabetical by this group's values.
	PivotGroupSortValueBucket valueBucket;
	/// True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to "Q1 Mar", "Q1" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause "Q1" to be repeated for "Feb" and "Mar". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+
	Ternary repeatHeadings;
	/// True if the pivot table should include the totals for this grouping.
	Ternary showTotals;
	/// The order the values in this group should be sorted.
	@byName SortOrder sortOrder;
	alias SortOrder = .SortOrder; /// ditto
	/// The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+
	@embedNullable Nullable!string label;
	/// The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
	@embedNullable Nullable!int sourceColumnOffset;
	/// Metadata about values in the grouping.
	PivotGroupValueMetadata[ ] valueMetadata;
}

/// Metadata about a value in a pivot grouping.
struct PivotGroupValueMetadata {
@optional:
	/// The calculated value the metadata corresponds to. (Note that formulaValue is not valid, because the values will be calculated.)
	ExtendedValue value;
	/// True if the data corresponding to the value is collapsed.
	Ternary collapsed;
}

/// Information about which values in a pivot group should be used for sorting.
struct PivotGroupSortValueBucket {
	/// Determines the bucket from which values are chosen to sort. For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group. If no values are listed, this would indicate that the row should be sorted according to the "Grand Total" over the column groups. If a single value is listed, this would correspond to using the "Total" of that bucket.
	@optional ExtendedValue[ ] buckets;
	/// The offset in the PivotTable.values list which the values in this grouping should be sorted by.
	@embedNullable Nullable!int valuesIndex;
}

/// An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
struct PivotGroupRule {
@optional:
	/// A DateTimeRule.
	DateTimeRule dateTimeRule;
	/// A HistogramRule.
	HistogramRule histogramRule;
	/// A ManualRule.
	ManualRule manualRule;
}

/// Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state: +-------+-------------------+ | State | SUM of Population | +-------+-------------------+ | AK | 0.7 | | AL | 4.8 | | AR | 2.9 | ... +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName = 'Central', items = ['AL', 'AR', 'IA', ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table. +-----------+-------------------+ | Time Zone | SUM of Population | +-----------+-------------------+ | Central | 106.3 | | Eastern | 151.9 | | Mountain | 17.4 | ... +-----------+-------------------+
struct ManualRule {
	/// The list of group names and the corresponding items from the source data that map to each group name.
	@optional ManualRuleGroup[ ] groups;
}

/// A group name and a list of items from the source data that should be placed in the group with this name.
struct ManualRuleGroup {
@optional:
	/// The group name, which must be a string. Each group in a given ManualRule must have a unique group name.
	ExtendedValue groupName;
	/// The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
	ExtendedValue[ ] items;
}

/// Allows you to organize the numeric values in a source data column into buckets of a constant size. All values from HistogramRule.start to HistogramRule.end are placed into groups of size HistogramRule.interval. In addition, all values below HistogramRule.start are placed in one group, and all values above HistogramRule.end are placed in another. Only HistogramRule.interval is required, though if HistogramRule.start and HistogramRule.end are both provided, HistogramRule.start must be less than HistogramRule.end. For example, a pivot table showing average purchase amount by age that has 50+ rows: +-----+-------------------+ | Age | AVERAGE of Amount | +-----+-------------------+ | 16 | $27.13 | | 17 | $5.24 | | 18 | $20.15 | ... +-----+-------------------+ could be turned into a pivot table that looks like the one below by applying a histogram group rule with a HistogramRule.start of 25, an HistogramRule.interval of 20, and an HistogramRule.end of 65. +-------------+-------------------+ | Grouped Age | AVERAGE of Amount | +-------------+-------------------+ | < 25 | $19.34 | | 25-45 | $31.43 | | 45-65 | $35.87 | | > 65 | $27.55 | +-------------+-------------------+ | Grand Total | $29.12 | +-------------+-------------------+
struct HistogramRule {
@optional:
	/// The maximum value at which items are placed into buckets of constant size. Values above end are lumped into a single bucket. This field is optional.
	double end;
	/// The size of the buckets that are created. Must be positive.
	double interval;
	/// The minimum value at which items are placed into buckets of constant size. Values below start are lumped into a single bucket. This field is optional.
	double start;
}

/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values. For example, consider a pivot table showing sales transactions by date: +----------+--------------+ | Date | SUM of Sales | +----------+--------------+ | 1/1/2017 | $621.14 | | 2/3/2017 | $708.84 | | 5/8/2017 | $326.84 | ... +----------+--------------+ Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH results in the following pivot table. +--------------+--------------+ | Grouped Date | SUM of Sales | +--------------+--------------+ | 2017-Jan | $53,731.78 | | 2017-Feb | $83,475.32 | | 2017-Mar | $94,385.05 | ... +--------------+--------------+
struct DateTimeRule {
	/// The type of date-time grouping to apply.
	@optional @byName Type type;
	alias Type = P.Type_3; /// ditto
}

/// The count limit on rows or columns in the pivot group.
struct PivotGroupLimit {
	/// The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.
	@embedNullable Nullable!int applyOrder;
	/// The count limit.
	@embedNullable Nullable!int countLimit;
}

/// Criteria for showing/hiding rows in a pivot table.
struct PivotFilterCriteria {
@optional:
	/// A condition that must be true for values to be shown. (`visibleValues` does not override this -- even if a value is listed there, it is still hidden if it does not meet the condition.) Condition values that refer to ranges in A1-notation are evaluated relative to the pivot table sheet. References are treated absolutely, so are not filled down the pivot table. For example, a condition value of `=A1` on "Pivot Table 1" is treated as `'Pivot Table 1'!$A$1`. The source data of the pivot table can be referenced by column header name. For example, if the source data has columns named "Revenue" and "Cost" and a condition is applied to the "Revenue" column with type `NUMBER_GREATER` and value `=Cost`, then only columns where "Revenue" > "Cost" are included.
	BooleanCondition condition;
	/// Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.
	Ternary visibleByDefault;
	/// Values that should be included. Values not listed here are excluded.
	string[ ] visibleValues;
}

/// The pivot table filter criteria associated with a specific source column offset.
struct PivotFilterSpec {
@optional:
	/// The reference to the data source column.
	DataSourceColumnReference dataSourceColumnReference;
	/// The criteria for the column.
	PivotFilterCriteria filterCriteria;
	/// The zero-based column offset of the source range.
	@embedNullable Nullable!int columnOffsetIndex;
}

/// The definition of how a value in a pivot table should be calculated.
struct PivotValue {
@optional:
	/// The reference to the data source column that this value reads from.
	DataSourceColumnReference dataSourceColumnReference;
	/// If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
	@byName CalculatedDisplayType calculatedDisplayType;
	alias CalculatedDisplayType = .CalculatedDisplayType; /// ditto
	/// A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
	@byName SummarizeFunction summarizeFunction;
	alias SummarizeFunction = .SummarizeFunction; /// ditto
	/// A custom formula to calculate the value. The formula must start with an `=` character.
	@embedNullable Nullable!string formula;
	/// A name to use for the value.
	@embedNullable Nullable!string name;
	/// The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
	@embedNullable Nullable!int sourceColumnOffset;
}

/// A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
struct DataSourceTable {
@optional:
	/// Output only. The data execution status.
	@readOnly DataExecutionStatus dataExecutionStatus;
	/// The type to select columns for the data source table. Defaults to SELECTED.
	@byName ColumnSelectionType columnSelectionType;
	alias ColumnSelectionType = .ColumnSelectionType; /// ditto
	/// Columns selected for the data source table. The column_selection_type must be SELECTED.
	DataSourceColumnReference[ ] columns;
	/// The ID of the data source the data source table is associated with.
	@embedNullable Nullable!string dataSourceId;
	/// Filter specifications in the data source table.
	FilterSpec[ ] filterSpecs;
	/// The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
	@embedNullable Nullable!int rowLimit;
	/// Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
	SortSpec[ ] sortSpecs;
}

/// The filter criteria associated with a specific column.
struct FilterSpec {
@optional:
	/// Reference to a data source column.
	DataSourceColumnReference dataSourceColumnReference;
	/// The criteria for the column.
	FilterCriteria filterCriteria;
	/// The zero-based column index.
	@embedNullable Nullable!int columnIndex;
}

/// Criteria for showing/hiding rows in a filter or filter view.
struct FilterCriteria {
@optional:
	/// A condition that must be true for values to be shown. (This does not override hidden_values -- if a value is listed there, it will still be hidden.)
	BooleanCondition condition;
	/// The background fill color to filter by; only cells with this fill color are shown. Mutually exclusive with visible_foreground_color. Deprecated: Use visible_background_color_style.
	Color visibleBackgroundColor;
	/// The background fill color to filter by; only cells with this fill color are shown. This field is mutually exclusive with visible_foreground_color, and must be set to an RGB-type color. If visible_background_color is also set, this field takes precedence.
	ColorStyle visibleBackgroundColorStyle;
	/// The foreground color to filter by; only cells with this foreground color are shown. Mutually exclusive with visible_background_color. Deprecated: Use visible_foreground_color_style.
	Color visibleForegroundColor;
	/// The foreground color to filter by; only cells with this foreground color are shown. This field is mutually exclusive with visible_background_color, and must be set to an RGB-type color. If visible_foreground_color is also set, this field takes precedence.
	ColorStyle visibleForegroundColorStyle;
	/// Values that should be hidden.
	string[ ] hiddenValues;
}

/// A sort order associated with a specific column or row.
struct SortSpec {
@optional:
	/// The background fill color to sort by; cells with this fill color are sorted to the top. Mutually exclusive with foreground_color. Deprecated: Use background_color_style.
	Color backgroundColor;
	/// The background fill color to sort by; cells with this fill color are sorted to the top. Mutually exclusive with foreground_color, and must be an RGB-type color. If background_color is also set, this field takes precedence.
	ColorStyle backgroundColorStyle;
	/// Reference to a data source column.
	DataSourceColumnReference dataSourceColumnReference;
	/// The foreground color to sort by; cells with this foreground color are sorted to the top. Mutually exclusive with background_color. Deprecated: Use foreground_color_style.
	Color foregroundColor;
	/// The foreground color to sort by; cells with this foreground color are sorted to the top. Mutually exclusive with background_color, and must be an RGB-type color. If foreground_color is also set, this field takes precedence.
	ColorStyle foregroundColorStyle;
	/// The order data should be sorted.
	@byName SortOrder sortOrder;
	alias SortOrder = .SortOrder; /// ditto
	/// The dimension the sort should be applied to.
	@embedNullable Nullable!int dimensionIndex;
}

/// A data source formula.
struct DataSourceFormula {
	/// Output only. The data execution status.
	@optional @readOnly DataExecutionStatus dataExecutionStatus;
	/// The ID of the data source the formula is associated with.
	@embedNullable Nullable!string dataSourceId;
}

/// Properties about a dimension.
struct DimensionProperties {
@optional:
	/// Output only. If set, this is a column in a data source sheet.
	@readOnly DataSourceColumnReference dataSourceColumnReference;
	/// True if this dimension is being filtered. This field is read-only.
	Ternary hiddenByFilter;
	/// True if this dimension is explicitly hidden.
	Ternary hiddenByUser;
	/// The developer metadata associated with a single row or column.
	DeveloperMetadata[ ] developerMetadata;
	/// The height (if a row) or width (if a column) of the dimension in pixels.
	@embedNullable Nullable!int pixelSize;
}

/// A rule describing a conditional format.
struct ConditionalFormatRule {
@optional:
	/// The formatting is either "on" or "off" according to the rule.
	BooleanRule booleanRule;
	/// The formatting will vary based on the gradients in the rule.
	GradientRule gradientRule;
	/// The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
	GridRange[ ] ranges;
}

/// A rule that may or may not match, depending on the condition.
struct BooleanRule {
@optional:
	/// The condition of the rule. If the condition evaluates to true, the format is applied.
	BooleanCondition condition;
	/// The format to apply. Conditional formatting can only apply a subset of formatting: bold, italic, strikethrough, foreground color and, background color.
	CellFormat format;
}

/// A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points.
struct GradientRule {
@optional:
	/// The final interpolation point.
	InterpolationPoint maxpoint;
	/// An optional midway interpolation point.
	InterpolationPoint midpoint;
	/// The starting interpolation point.
	InterpolationPoint minpoint;
}

/// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
struct InterpolationPoint {
@optional:
	/// The color this interpolation point should use. Deprecated: Use color_style.
	Color color;
	/// The color this interpolation point should use. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
	/// How the value should be interpreted.
	@byName Type type;
	alias Type = P.Type_4; /// ditto
	/// The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.
	@embedNullable Nullable!string value;
}

/// A filter view.
struct FilterView {
@optional:
	/// The range this filter view covers. When writing, only one of range or named_range_id may be set.
	GridRange range;
	/// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
	FilterCriteria[string] criteria;
	/// The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
	FilterSpec[ ] filterSpecs;
	/// The ID of the filter view.
	@embedNullable Nullable!int filterViewId;
	/// The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
	@embedNullable Nullable!string namedRangeId;
	/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
	SortSpec[ ] sortSpecs;
	/// The name of the filter view.
	@embedNullable Nullable!string title;
}

/// A protected range.
struct ProtectedRange {
@optional:
	/// The users and groups with edit access to the protected range. This field is only visible to users with edit access to the protected range and the document. Editors are not supported with warning_only protection.
	Editors editors;
	/// The range that is being protected. The range may be fully unbounded, in which case this is considered a protected sheet. When writing, only one of range or named_range_id may be set.
	GridRange range;
	/// True if the user who requested this protected range can edit the protected area. This field is read-only.
	Ternary requestingUserCanEdit;
	/// True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
	Ternary warningOnly;
	/// The description of this protected range.
	@embedNullable Nullable!string description;
	/// The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
	@embedNullable Nullable!string namedRangeId;
	/// The ID of the protected range. This field is read-only.
	@embedNullable Nullable!int protectedRangeId;
	/// The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
	GridRange[ ] unprotectedRanges;
}

/// The editors of a protected range.
struct Editors {
@optional:
	/// True if anyone in the document's domain has edit access to the protected range. Domain protection is only supported on documents within a domain.
	Ternary domainUsersCanEdit;
	/// The email addresses of groups with edit access to the protected range.
	string[ ] groups;
	/// The email addresses of users with edit access to the protected range.
	string[ ] users;
}

/// The default filter associated with a sheet.
struct BasicFilter {
@optional:
	/// The range the filter covers.
	GridRange range;
	/// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
	FilterCriteria[string] criteria;
	/// The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
	FilterSpec[ ] filterSpecs;
	/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
	SortSpec[ ] sortSpecs;
}

/// A chart embedded in a sheet.
struct EmbeddedChart {
@optional:
	/// The border of the chart.
	EmbeddedObjectBorder border;
	/// The position of the chart.
	EmbeddedObjectPosition position;
	/// The specification of the chart.
	ChartSpec spec;
	/// The ID of the chart.
	@embedNullable Nullable!int chartId;
}

/// The specifications of a chart.
struct ChartSpec {
@optional:
	/// The background color of the entire chart. Not applicable to Org charts. Deprecated: Use background_color_style.
	Color backgroundColor;
	/// The background color of the entire chart. Not applicable to Org charts. If background_color is also set, this field takes precedence.
	ColorStyle backgroundColorStyle;
	/// A basic chart specification, can be one of many kinds of charts. See BasicChartType for the list of all charts this supports.
	BasicChartSpec basicChart;
	/// A bubble chart specification.
	BubbleChartSpec bubbleChart;
	/// A candlestick chart specification.
	CandlestickChartSpec candlestickChart;
	/// If present, the field contains data source chart specific properties.
	DataSourceChartProperties dataSourceChartProperties;
	/// A histogram chart specification.
	HistogramChartSpec histogramChart;
	/// An org chart specification.
	OrgChartSpec orgChart;
	/// A pie chart specification.
	PieChartSpec pieChart;
	/// A scorecard chart specification.
	ScorecardChartSpec scorecardChart;
	/// The subtitle text format. Strikethrough, underline, and link are not supported.
	TextFormat subtitleTextFormat;
	/// The subtitle text position. This field is optional.
	TextPosition subtitleTextPosition;
	/// The title text format. Strikethrough, underline, and link are not supported.
	TextFormat titleTextFormat;
	/// The title text position. This field is optional.
	TextPosition titleTextPosition;
	/// A treemap chart specification.
	TreemapChartSpec treemapChart;
	/// A waterfall chart specification.
	WaterfallChartSpec waterfallChart;
	/// Determines how the charts will use hidden rows or columns.
	@byName HiddenDimensionStrategy hiddenDimensionStrategy;
	alias HiddenDimensionStrategy = .HiddenDimensionStrategy; /// ditto
	/// True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
	Ternary maximized;
	/// The alternative text that describes the chart. This is often used for accessibility.
	@embedNullable Nullable!string altText;
	/// The filters applied to the source data of the chart. Only supported for data source charts.
	FilterSpec[ ] filterSpecs;
	/// The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
	@embedNullable Nullable!string fontName;
	/// The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
	SortSpec[ ] sortSpecs;
	/// The subtitle of the chart.
	@embedNullable Nullable!string subtitle;
	/// The title of the chart.
	@embedNullable Nullable!string title;
}

/// Position settings for text.
struct TextPosition {
	/// Horizontal alignment setting for the piece of text.
	@optional @byName HorizontalAlignment horizontalAlignment;
	alias HorizontalAlignment = .HorizontalAlignment; /// ditto
}

/// Properties of a data source chart.
struct DataSourceChartProperties {
	/// Output only. The data execution status.
	@optional @readOnly DataExecutionStatus dataExecutionStatus;
	/// ID of the data source that the chart is associated with.
	@embedNullable Nullable!string dataSourceId;
}

/// The specification for a basic chart. See BasicChartType for the list of charts this supports.
struct BasicChartSpec {
@optional:
	/// Controls whether to display additional data labels on stacked charts which sum the total value of all stacked values at each value along the domain axis. These data labels can only be set when chart_type is one of AREA, BAR, COLUMN, COMBO or STEPPED_AREA and stacked_type is either STACKED or PERCENT_STACKED. In addition, for COMBO, this will only be supported if there is only one type of stackable series type or one type has more series than the others and each of the other types have no more than one series. For example, if a chart has two stacked bar series and one area series, the total data labels will be supported. If it has three bar series and two area series, total data labels are not allowed. Neither CUSTOM nor placement can be set on the total_data_label.
	DataLabel totalDataLabel;
	/// The type of the chart.
	@byName ChartType chartType;
	alias ChartType = P.Type_5; /// ditto
	/// The behavior of tooltips and data highlighting when hovering on data and chart area.
	@byName CompareMode compareMode;
	alias CompareMode = .CompareMode; /// ditto
	/// If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
	Ternary interpolateNulls;
	/// The position of the chart legend.
	@byName LegendPosition legendPosition;
	alias LegendPosition = P.LegendPosition_0; /// ditto
	/// Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
	Ternary lineSmoothing;
	/// The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
	@byName StackedType stackedType;
	alias StackedType = P.StackedType_0; /// ditto
	/// True to make the chart 3D. Applies to Bar and Column charts.
	Ternary threeDimensional;
	/// The axis on the chart.
	BasicChartAxis[ ] axis;
	/// The domain of data this is charting. Only a single domain is supported.
	BasicChartDomain[ ] domains;
	/// The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
	@embedNullable Nullable!int headerCount;
	/// The data this chart is visualizing.
	BasicChartSeries[ ] series;
}

/// An axis of the chart. A chart may not have more than one axis per axis position.
struct BasicChartAxis {
@optional:
	/// The format of the title. Only valid if the axis is not associated with the domain. The link field is not supported.
	TextFormat format;
	/// The axis title text position.
	TextPosition titleTextPosition;
	/// The view window options for this axis.
	ChartAxisViewWindowOptions viewWindowOptions;
	/// The position of this axis.
	@byName Position position;
	alias Position = P.TargetAxis; /// ditto
	/// The title of this axis. If set, this overrides any title inferred from headers of the data.
	@embedNullable Nullable!string title;
}

/// The options that define a "view window" for a chart (such as the visible values in an axis).
struct ChartAxisViewWindowOptions {
@optional:
	/// The view window's mode.
	@byName ViewWindowMode viewWindowMode;
	alias ViewWindowMode = .ViewWindowMode; /// ditto
	/// The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
	double viewWindowMax;
	/// The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
	double viewWindowMin;
}

/// The domain of a chart. For example, if charting stock prices over time, this would be the date.
struct BasicChartDomain {
@optional:
	/// The data of the domain. For example, if charting stock prices over time, this is the data representing the dates.
	ChartData domain;
	/// True to reverse the order of the domain values (horizontal axis).
	Ternary reversed;
}

/// The data included in a domain or series.
struct ChartData {
@optional:
	/// The reference to the data source column that the data reads from.
	DataSourceColumnReference columnReference;
	/// The rule to group the data by if the ChartData backs the domain of a data source chart. Only supported for data source charts.
	ChartGroupRule groupRule;
	/// The source ranges of the data.
	ChartSourceRange sourceRange;
	/// The aggregation type for the series of a data source chart. Only supported for data source charts.
	@byName AggregateType aggregateType;
	alias AggregateType = .AggregateType; /// ditto
}

/// Source ranges for a chart.
struct ChartSourceRange {
	/// The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series. For example, these are valid configurations: domain sources: A1:A5 series1 sources: B1:B5 series2 sources: D6:D10 domain sources: A1:A5, C10:C12 series1 sources: B1:B5, D10:D12 series2 sources: C1:C5, E10:E12
	@optional GridRange[ ] sources;
}

/// An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type.
struct ChartGroupRule {
@optional:
	/// A ChartDateTimeRule.
	ChartDateTimeRule dateTimeRule;
	/// A ChartHistogramRule
	ChartHistogramRule histogramRule;
}

/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
struct ChartDateTimeRule {
	/// The type of date-time grouping to apply.
	@optional @byName Type type;
	alias Type = P.Type_6; /// ditto
}

/// Allows you to organize numeric values in a source data column into buckets of constant size.
struct ChartHistogramRule {
@optional:
	/// The size of the buckets that are created. Must be positive.
	double intervalSize;
	/// The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.
	double maxValue;
	/// The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.
	double minValue;
}

/// A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the "Open Price", "High Price", "Low Price" and "Close Price".
struct BasicChartSeries {
@optional:
	/// The color for elements (such as bars, lines, and points) associated with this series. If empty, a default color is used. Deprecated: Use color_style.
	Color color;
	/// The color for elements (such as bars, lines, and points) associated with this series. If empty, a default color is used. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
	/// Information about the data labels for this series.
	DataLabel dataLabel;
	/// The line style of this series. Valid only if the chartType is AREA, LINE, or SCATTER. COMBO charts are also supported if the series chart type is AREA or LINE.
	LineStyle lineStyle;
	/// The style for points associated with this series. Valid only if the chartType is AREA, LINE, or SCATTER. COMBO charts are also supported if the series chart type is AREA, LINE, or SCATTER. If empty, a default point style is used.
	PointStyle pointStyle;
	/// The data being visualized in this chart series.
	ChartData series;
	/// The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the "Volume" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
	@byName TargetAxis targetAxis;
	alias TargetAxis = P.TargetAxis; /// ditto
	/// The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
	@byName Type type;
	alias Type = P.Type_5; /// ditto
	/// Style override settings for series data points.
	BasicSeriesDataPointStyleOverride[ ] styleOverrides;
}

/// Properties that describe the style of a line.
struct LineStyle {
	/// The dash type of the line.
	@optional @byName Type type;
	alias Type = P.Type_7; /// ditto
	/// The thickness of the line, in px.
	@embedNullable Nullable!int width;
}

/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
struct DataLabel {
@optional:
	/// Data to use for custom labels. Only used if type is set to CUSTOM. This data must be the same length as the series or other element this data label is applied to. In addition, if the series is split into multiple source ranges, this source data must come from the next column in the source data. For example, if the series is B2:B4,E6:E8 then this data must come from C2:C4,F6:F8.
	ChartData customLabelData;
	/// The text format used for the data label. The link field is not supported.
	TextFormat textFormat;
	/// The placement of the data label relative to the labeled data.
	@byName Placement placement;
	alias Placement = .Placement; /// ditto
	/// The type of the data label.
	@byName Type type;
	alias Type = P.Type_8; /// ditto
}

/// The style of a point on the chart.
struct PointStyle {
@optional:
	/// The point shape. If empty or unspecified, a default shape is used.
	@byName Shape shape;
	alias Shape = P.Shape; /// ditto
	/// The point size. If empty, a default size is used.
	double size;
}

/// Style override settings for a single series data point.
struct BasicSeriesDataPointStyleOverride {
@optional:
	/// Color of the series data point. If empty, the series default is used. Deprecated: Use color_style.
	Color color;
	/// Color of the series data point. If empty, the series default is used. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
	/// Point style of the series data point. Valid only if the chartType is AREA, LINE, or SCATTER. COMBO charts are also supported if the series chart type is AREA, LINE, or SCATTER. If empty, the series default is used.
	PointStyle pointStyle;
	/// The zero-based index of the series data point.
	@embedNullable Nullable!int index;
}

/// A pie chart.
struct PieChartSpec {
@optional:
	/// The data that covers the domain of the pie chart.
	ChartData domain;
	/// The data that covers the one and only series of the pie chart.
	ChartData series;
	/// Where the legend of the pie chart should be drawn.
	@byName LegendPosition legendPosition;
	alias LegendPosition = P.LegendPosition_1; /// ditto
	/// True if the pie is three dimensional.
	Ternary threeDimensional;
	/// The size of the hole in the pie chart.
	double pieHole;
}

/// A bubble chart.
struct BubbleChartSpec {
@optional:
	/// The bubble border color. Deprecated: Use bubble_border_color_style.
	Color bubbleBorderColor;
	/// The bubble border color. If bubble_border_color is also set, this field takes precedence.
	ColorStyle bubbleBorderColorStyle;
	/// The data containing the bubble labels. These do not need to be unique.
	ChartData bubbleLabels;
	/// The data containing the bubble sizes. Bubble sizes are used to draw the bubbles at different sizes relative to each other. If specified, group_ids must also be specified. This field is optional.
	ChartData bubbleSizes;
	/// The format of the text inside the bubbles. Strikethrough, underline, and link are not supported.
	TextFormat bubbleTextStyle;
	/// The data containing the bubble x-values. These values locate the bubbles in the chart horizontally.
	ChartData domain;
	/// The data containing the bubble group IDs. All bubbles with the same group ID are drawn in the same color. If bubble_sizes is specified then this field must also be specified but may contain blank values. This field is optional.
	ChartData groupIds;
	/// The data containing the bubble y-values. These values locate the bubbles in the chart vertically.
	ChartData series;
	/// Where the legend of the chart should be drawn.
	@byName LegendPosition legendPosition;
	alias LegendPosition = P.LegendPosition_2; /// ditto
	/// The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
	float bubbleOpacity;
	/// The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
	@embedNullable Nullable!int bubbleMaxRadiusSize;
	/// The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
	@embedNullable Nullable!int bubbleMinRadiusSize;
}

/// A candlestick chart.
struct CandlestickChartSpec {
@optional:
	/// The domain data (horizontal axis) for the candlestick chart. String data will be treated as discrete labels, other data will be treated as continuous values.
	CandlestickDomain domain;
	/// The Candlestick chart data. Only one CandlestickData is supported.
	CandlestickData[ ] data;
}

/// The domain of a CandlestickChart.
struct CandlestickDomain {
@optional:
	/// The data of the CandlestickDomain.
	ChartData data;
	/// True to reverse the order of the domain values (horizontal axis).
	Ternary reversed;
}

/// The Candlestick chart data, each containing the low, open, close, and high values for a series.
struct CandlestickData {
@optional:
	/// The range data (vertical axis) for the close/final value for each candle. This is the top of the candle body. If greater than the open value the candle will be filled. Otherwise the candle will be hollow.
	CandlestickSeries closeSeries;
	/// The range data (vertical axis) for the high/maximum value for each candle. This is the top of the candle's center line.
	CandlestickSeries highSeries;
	/// The range data (vertical axis) for the low/minimum value for each candle. This is the bottom of the candle's center line.
	CandlestickSeries lowSeries;
	/// The range data (vertical axis) for the open/initial value for each candle. This is the bottom of the candle body. If less than the close value the candle will be filled. Otherwise the candle will be hollow.
	CandlestickSeries openSeries;
}

/// The series of a CandlestickData.
struct CandlestickSeries {
	/// The data of the CandlestickSeries.
	@optional ChartData data;
}

/// An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain "Alice", "Bob", "Cathy", parent_labels contain "", "Alice", "Alice" and tooltips contain "CEO", "President", "VP Sales".
struct OrgChartSpec {
@optional:
	/// The data containing the labels for all the nodes in the chart. Labels must be unique.
	ChartData labels;
	/// The color of the org chart nodes. Deprecated: Use node_color_style.
	Color nodeColor;
	/// The color of the org chart nodes. If node_color is also set, this field takes precedence.
	ColorStyle nodeColorStyle;
	/// The data containing the label of the parent for the corresponding node. A blank value indicates that the node has no parent and is a top-level node. This field is optional.
	ChartData parentLabels;
	/// The color of the selected org chart nodes. Deprecated: Use selected_node_color_style.
	Color selectedNodeColor;
	/// The color of the selected org chart nodes. If selected_node_color is also set, this field takes precedence.
	ColorStyle selectedNodeColorStyle;
	/// The data containing the tooltip for the corresponding node. A blank value results in no tooltip being displayed for the node. This field is optional.
	ChartData tooltips;
	/// The size of the org chart nodes.
	@byName NodeSize nodeSize;
	alias NodeSize = .NodeSize; /// ditto
}

/// A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
struct HistogramChartSpec {
@optional:
	/// The position of the chart legend.
	@byName LegendPosition legendPosition;
	alias LegendPosition = P.LegendPosition_3; /// ditto
	/// Whether horizontal divider lines should be displayed between items in each column.
	Ternary showItemDividers;
	/// By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
	double bucketSize;
	/// The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
	double outlierPercentile;
	/// The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
	HistogramSeries[ ] series;
}

/// A histogram series containing the series color and data.
struct HistogramSeries {
@optional:
	/// The color of the column representing this series in each bucket. This field is optional. Deprecated: Use bar_color_style.
	Color barColor;
	/// The color of the column representing this series in each bucket. This field is optional. If bar_color is also set, this field takes precedence.
	ColorStyle barColorStyle;
	/// The data for this histogram series.
	ChartData data;
}

/// A waterfall chart.
struct WaterfallChartSpec {
@optional:
	/// The line style for the connector lines.
	LineStyle connectorLineStyle;
	/// The domain data (horizontal axis) for the waterfall chart.
	WaterfallChartDomain domain;
	/// Controls whether to display additional data labels on stacked charts which sum the total value of all stacked values at each value along the domain axis. stacked_type must be STACKED and neither CUSTOM nor placement can be set on the total_data_label.
	DataLabel totalDataLabel;
	/// True to interpret the first value as a total.
	Ternary firstValueIsTotal;
	/// True to hide connector lines between columns.
	Ternary hideConnectorLines;
	/// The stacked type.
	@byName StackedType stackedType;
	alias StackedType = P.StackedType_1; /// ditto
	/// The data this waterfall chart is visualizing.
	WaterfallChartSeries[ ] series;
}

/// The domain of a waterfall chart.
struct WaterfallChartDomain {
@optional:
	/// The data of the WaterfallChartDomain.
	ChartData data;
	/// True to reverse the order of the domain values (horizontal axis).
	Ternary reversed;
}

/// A single series of data for a waterfall chart.
struct WaterfallChartSeries {
@optional:
	/// The data being visualized in this series.
	ChartData data;
	/// Information about the data labels for this series.
	DataLabel dataLabel;
	/// Styles for all columns in this series with negative values.
	WaterfallChartColumnStyle negativeColumnsStyle;
	/// Styles for all columns in this series with positive values.
	WaterfallChartColumnStyle positiveColumnsStyle;
	/// Styles for all subtotal columns in this series.
	WaterfallChartColumnStyle subtotalColumnsStyle;
	/// True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
	Ternary hideTrailingSubtotal;
	/// Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
	WaterfallChartCustomSubtotal[ ] customSubtotals;
}

/// Styles for a waterfall chart column.
struct WaterfallChartColumnStyle {
@optional:
	/// The color of the column. Deprecated: Use color_style.
	Color color;
	/// The color of the column. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
	/// The label of the column's legend.
	@embedNullable Nullable!string label;
}

/// A custom subtotal column for a waterfall chart series.
struct WaterfallChartCustomSubtotal {
	/// True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
	@optional Ternary dataIsSubtotal;
	/// A label for the subtotal column.
	@embedNullable Nullable!string label;
	/// The zero-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
	@embedNullable Nullable!int subtotalIndex;
}

/// A Treemap chart.
struct TreemapChartSpec {
@optional:
	/// The data that determines the background color of each treemap data cell. This field is optional. If not specified, size_data is used to determine background colors. If specified, the data is expected to be numeric. color_scale will determine how the values in this data map to data cell background colors.
	ChartData colorData;
	/// The color scale for data cells in the treemap chart. Data cells are assigned colors based on their color values. These color values come from color_data, or from size_data if color_data is not specified. Cells with color values less than or equal to min_value will have minValueColor as their background color. Cells with color values greater than or equal to max_value will have maxValueColor as their background color. Cells with color values between min_value and max_value will have background colors on a gradient between minValueColor and maxValueColor, the midpoint of the gradient being midValueColor. Cells with missing or non-numeric color values will have noDataColor as their background color.
	TreemapChartColorScale colorScale;
	/// The background color for header cells. Deprecated: Use header_color_style.
	Color headerColor;
	/// The background color for header cells. If header_color is also set, this field takes precedence.
	ColorStyle headerColorStyle;
	/// The data that contains the treemap cell labels.
	ChartData labels;
	/// The data the contains the treemap cells' parent labels.
	ChartData parentLabels;
	/// The data that determines the size of each treemap data cell. This data is expected to be numeric. The cells corresponding to non-numeric or missing data will not be rendered. If color_data is not specified, this data is used to determine data cell background colors as well.
	ChartData sizeData;
	/// The text format for all labels on the chart. The link field is not supported.
	TextFormat textFormat;
	/// True to hide tooltips.
	Ternary hideTooltips;
	/// The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
	@embedNullable Nullable!int hintedLevels;
	/// The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
	@embedNullable Nullable!int levels;
	/// The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
	double maxValue;
	/// The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
	double minValue;
}

/// A color scale for a treemap chart.
struct TreemapChartColorScale {
@optional:
	/// The background color for cells with a color value greater than or equal to maxValue. Defaults to #109618 if not specified. Deprecated: Use max_value_color_style.
	Color maxValueColor;
	/// The background color for cells with a color value greater than or equal to maxValue. Defaults to #109618 if not specified. If max_value_color is also set, this field takes precedence.
	ColorStyle maxValueColorStyle;
	/// The background color for cells with a color value at the midpoint between minValue and maxValue. Defaults to #efe6dc if not specified. Deprecated: Use mid_value_color_style.
	Color midValueColor;
	/// The background color for cells with a color value at the midpoint between minValue and maxValue. Defaults to #efe6dc if not specified. If mid_value_color is also set, this field takes precedence.
	ColorStyle midValueColorStyle;
	/// The background color for cells with a color value less than or equal to minValue. Defaults to #dc3912 if not specified. Deprecated: Use min_value_color_style.
	Color minValueColor;
	/// The background color for cells with a color value less than or equal to minValue. Defaults to #dc3912 if not specified. If min_value_color is also set, this field takes precedence.
	ColorStyle minValueColorStyle;
	/// The background color for cells that have no color data associated with them. Defaults to #000000 if not specified. Deprecated: Use no_data_color_style.
	Color noDataColor;
	/// The background color for cells that have no color data associated with them. Defaults to #000000 if not specified. If no_data_color is also set, this field takes precedence.
	ColorStyle noDataColorStyle;
}

/// A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
struct ScorecardChartSpec {
@optional:
	/// The data for scorecard baseline value. This field is optional.
	ChartData baselineValueData;
	/// Formatting options for baseline value. This field is needed only if baseline_value_data is specified.
	BaselineValueFormat baselineValueFormat;
	/// Custom formatting options for numeric key/baseline values in scorecard chart. This field is used only when number_format_source is set to CUSTOM. This field is optional.
	ChartCustomNumberFormatOptions customFormatOptions;
	/// The data for scorecard key value.
	ChartData keyValueData;
	/// Formatting options for key value.
	KeyValueFormat keyValueFormat;
	/// The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
	@byName AggregateType aggregateType;
	alias AggregateType = .AggregateType; /// ditto
	/// The number format source used in the scorecard chart. This field is optional.
	@byName NumberFormatSource numberFormatSource;
	alias NumberFormatSource = .NumberFormatSource; /// ditto
	/// Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
	double scaleFactor;
}

/// Formatting options for key value.
struct KeyValueFormat {
@optional:
	/// Specifies the horizontal text positioning of key value. This field is optional. If not specified, default positioning is used.
	TextPosition position;
	/// Text formatting options for key value. The link field is not supported.
	TextFormat textFormat;
}

/// Formatting options for baseline value.
struct BaselineValueFormat {
@optional:
	/// Color to be used, in case baseline value represents a negative change for key value. This field is optional. Deprecated: Use negative_color_style.
	Color negativeColor;
	/// Color to be used, in case baseline value represents a negative change for key value. This field is optional. If negative_color is also set, this field takes precedence.
	ColorStyle negativeColorStyle;
	/// Specifies the horizontal text positioning of baseline value. This field is optional. If not specified, default positioning is used.
	TextPosition position;
	/// Color to be used, in case baseline value represents a positive change for key value. This field is optional. Deprecated: Use positive_color_style.
	Color positiveColor;
	/// Color to be used, in case baseline value represents a positive change for key value. This field is optional. If positive_color is also set, this field takes precedence.
	ColorStyle positiveColorStyle;
	/// Text formatting options for baseline value. The link field is not supported.
	TextFormat textFormat;
	/// The comparison type of key value with baseline value.
	@byName ComparisonType comparisonType;
	alias ComparisonType = .ComparisonType; /// ditto
	/// Description which is appended after the baseline value. This field is optional.
	@embedNullable Nullable!string description;
}

/// Custom number formatting options for chart attributes.
struct ChartCustomNumberFormatOptions {
	/// Custom prefix to be prepended to the chart attribute. This field is optional.
	@embedNullable Nullable!string prefix;
	/// Custom suffix to be appended to the chart attribute. This field is optional.
	@embedNullable Nullable!string suffix;
}

/// The position of an embedded object such as a chart.
struct EmbeddedObjectPosition {
@optional:
	/// The position at which the object is overlaid on top of a grid.
	OverlayPosition overlayPosition;
	/// If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.
	Ternary newSheet;
	/// The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.
	@embedNullable Nullable!int sheetId;
}

/// The location an object is overlaid on top of a grid.
struct OverlayPosition {
	/// The cell the object is anchored to.
	@optional GridCoordinate anchorCell;
	/// The height of the object, in pixels. Defaults to 371.
	@embedNullable Nullable!int heightPixels;
	/// The horizontal offset, in pixels, that the object is offset from the anchor cell.
	@embedNullable Nullable!int offsetXPixels;
	/// The vertical offset, in pixels, that the object is offset from the anchor cell.
	@embedNullable Nullable!int offsetYPixels;
	/// The width of the object, in pixels. Defaults to 600.
	@embedNullable Nullable!int widthPixels;
}

/// A coordinate in a sheet. All indexes are zero-based.
struct GridCoordinate {
	/// The column index of the coordinate.
	@embedNullable Nullable!int columnIndex;
	/// The row index of the coordinate.
	@embedNullable Nullable!int rowIndex;
	/// The sheet this coordinate is on.
	@embedNullable Nullable!int sheetId;
}

/// A border along an embedded object.
struct EmbeddedObjectBorder {
@optional:
	/// The color of the border. Deprecated: Use color_style.
	Color color;
	/// The color of the border. If color is also set, this field takes precedence.
	ColorStyle colorStyle;
}

/// A banded (alternating colors) range in a sheet.
struct BandedRange {
@optional:
	/// Properties for column bands. These properties are applied on a column- by-column basis throughout all the columns in the range. At least one of row_properties or column_properties must be specified.
	BandingProperties columnProperties;
	/// The range over which these properties are applied.
	GridRange range;
	/// Properties for row bands. These properties are applied on a row-by-row basis throughout all the rows in the range. At least one of row_properties or column_properties must be specified.
	BandingProperties rowProperties;
	/// The ID of the banded range.
	@embedNullable Nullable!int bandedRangeId;
}

/// Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
struct BandingProperties {
@optional:
	/// The first color that is alternating. (Required) Deprecated: Use first_band_color_style.
	Color firstBandColor;
	/// The first color that is alternating. (Required) If first_band_color is also set, this field takes precedence.
	ColorStyle firstBandColorStyle;
	/// The color of the last row or column. If this field is not set, the last row or column is filled with either first_band_color or second_band_color, depending on the color of the previous row or column. Deprecated: Use footer_color_style.
	Color footerColor;
	/// The color of the last row or column. If this field is not set, the last row or column is filled with either first_band_color or second_band_color, depending on the color of the previous row or column. If footer_color is also set, this field takes precedence.
	ColorStyle footerColorStyle;
	/// The color of the first row or column. If this field is set, the first row or column is filled with this color and the colors alternate between first_band_color and second_band_color starting from the second row or column. Otherwise, the first row or column is filled with first_band_color and the colors proceed to alternate as they normally would. Deprecated: Use header_color_style.
	Color headerColor;
	/// The color of the first row or column. If this field is set, the first row or column is filled with this color and the colors alternate between first_band_color and second_band_color starting from the second row or column. Otherwise, the first row or column is filled with first_band_color and the colors proceed to alternate as they normally would. If header_color is also set, this field takes precedence.
	ColorStyle headerColorStyle;
	/// The second color that is alternating. (Required) Deprecated: Use second_band_color_style.
	Color secondBandColor;
	/// The second color that is alternating. (Required) If second_band_color is also set, this field takes precedence.
	ColorStyle secondBandColorStyle;
}

/// A group over an interval of rows or columns on a sheet, which can contain or be contained within other groups. A group can be collapsed or expanded as a unit on the sheet.
struct DimensionGroup {
@optional:
	/// The range over which this group exists.
	DimensionRange range;
	/// This field is true if this group is collapsed. A collapsed group remains collapsed if an overlapping group at a shallower depth is expanded. A true value does not imply that all dimensions within the group are hidden, since a dimension's visibility can change independently from this group property. However, when this property is updated, all dimensions within it are set to hidden if this field is true, or set to visible if this field is false.
	Ternary collapsed;
	/// The depth of the group, representing how many groups have a range that wholly contains the range of this group.
	@embedNullable Nullable!int depth;
}

/// A slicer in a sheet.
struct Slicer {
@optional:
	/// The position of the slicer. Note that slicer can be positioned only on existing sheet. Also, width and height of slicer can be automatically adjusted to keep it within permitted limits.
	EmbeddedObjectPosition position;
	/// The specification of the slicer.
	SlicerSpec spec;
	/// The ID of the slicer.
	@embedNullable Nullable!int slicerId;
}

/// The specifications of a slicer.
struct SlicerSpec {
@optional:
	/// The background color of the slicer. Deprecated: Use background_color_style.
	Color backgroundColor;
	/// The background color of the slicer. If background_color is also set, this field takes precedence.
	ColorStyle backgroundColorStyle;
	/// The data range of the slicer.
	GridRange dataRange;
	/// The filtering criteria of the slicer.
	FilterCriteria filterCriteria;
	/// The text format of title in the slicer. The link field is not supported.
	TextFormat textFormat;
	/// True if the filter should apply to pivot tables. If not set, default to `True`.
	Ternary applyToPivotTables;
	/// The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
	@byName HorizontalAlignment horizontalAlignment;
	alias HorizontalAlignment = .HorizontalAlignment; /// ditto
	/// The zero-based column index in the data table on which the filter is applied to.
	@embedNullable Nullable!int columnIndex;
	/// The title of the slicer.
	@embedNullable Nullable!string title;
}

/// A named range.
struct NamedRange {
	/// The range this represents.
	@optional GridRange range;
	/// The name of the named range.
	@embedNullable Nullable!string name;
	/// The ID of the named range.
	@embedNullable Nullable!string namedRangeId;
}

/// Information about an external data source in the spreadsheet.
struct DataSource {
@optional:
	/// The DataSourceSpec for the data source connected with this spreadsheet.
	DataSourceSpec spec;
	/// All calculated columns in the data source.
	DataSourceColumn[ ] calculatedColumns;
	/// The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.
	@embedNullable Nullable!string dataSourceId;
	/// The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
	@embedNullable Nullable!int sheetId;
}

/// This specifies the details of the data source. For example, for BigQuery, this specifies information about the BigQuery source.
struct DataSourceSpec {
@optional:
	/// A BigQueryDataSourceSpec.
	BigQueryDataSourceSpec bigQuery;
	/// The parameters of the data source, used when querying the data source.
	DataSourceParameter[ ] parameters;
}

/// The specification of a BigQuery data source that's connected to a sheet.
struct BigQueryDataSourceSpec {
@optional:
	/// A BigQueryQuerySpec.
	BigQueryQuerySpec querySpec;
	/// A BigQueryTableSpec.
	BigQueryTableSpec tableSpec;
	/// The ID of a BigQuery enabled Google Cloud project with a billing account attached. For any queries executed against the data source, the project is charged.
	@embedNullable Nullable!string projectId;
}

/// Specifies a custom BigQuery query.
struct BigQueryQuerySpec {
	/// The raw query string.
	@embedNullable Nullable!string rawQuery;
}

/// Specifies a BigQuery table definition. Only [native tables](https://cloud.google.com/bigquery/docs/tables-intro) are allowed.
struct BigQueryTableSpec {
	/// The BigQuery dataset id.
	@embedNullable Nullable!string datasetId;
	/// The BigQuery table id.
	@embedNullable Nullable!string tableId;
	/// The ID of a BigQuery project the table belongs to. If not specified, the project_id is assumed.
	@embedNullable Nullable!string tableProjectId;
}

/// A parameter in a data source's query. The parameter allows the user to pass in values from the spreadsheet into a query.
struct DataSourceParameter {
	/// A range that contains the value of the parameter. Its size must be 1x1.
	@optional GridRange range;
	/// Named parameter. Must be a legitimate identifier for the DataSource that supports it. For example, [BigQuery identifier](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#identifiers).
	@embedNullable Nullable!string name;
	/// ID of a NamedRange. Its size must be 1x1.
	@embedNullable Nullable!string namedRangeId;
}

/// Schedule for refreshing the data source. Data sources in the spreadsheet are refreshed within a time interval. You can specify the start time by clicking the Scheduled Refresh button in the Sheets editor, but the interval is fixed at 4 hours. For example, if you specify a start time of 8 AM , the refresh will take place between 8 AM and 12 PM every day.
struct DataSourceRefreshSchedule {
@optional:
	/// Daily refresh schedule.
	DataSourceRefreshDailySchedule dailySchedule;
	/// Monthly refresh schedule.
	DataSourceRefreshMonthlySchedule monthlySchedule;
	/// Output only. The time interval of the next run.
	@readOnly Interval nextRun;
	/// Weekly refresh schedule.
	DataSourceRefreshWeeklySchedule weeklySchedule;
	/// True if the refresh schedule is enabled, or false otherwise.
	Ternary enabled;
	/// The scope of the refresh. Must be ALL_DATA_SOURCES.
	@byName RefreshScope refreshScope;
	alias RefreshScope = .RefreshScope; /// ditto
}

/// A schedule for data to refresh every day in a given time interval.
struct DataSourceRefreshDailySchedule {
	/// The start time of a time interval in which a data source refresh is scheduled. Only `hours` part is used. The time interval size defaults to that in the Sheets editor.
	@optional TimeOfDay startTime;
}

/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
struct TimeOfDay {
	/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	@embedNullable Nullable!int hours;
	/// Minutes of hour of day. Must be from 0 to 59.
	@embedNullable Nullable!int minutes;
	/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	@embedNullable Nullable!int nanos;
	/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	@embedNullable Nullable!int seconds;
}

/// A weekly schedule for data to refresh on specific days in a given time interval.
struct DataSourceRefreshWeeklySchedule {
@optional:
	/// The start time of a time interval in which a data source refresh is scheduled. Only `hours` part is used. The time interval size defaults to that in the Sheets editor.
	TimeOfDay startTime;
	/// Days of the week to refresh. At least one day must be specified.
	@byName DaysOfWeek[ ] daysOfWeek;
	alias DaysOfWeek = .DaysOfWeek; /// ditto
}

/// A monthly schedule for data to refresh on specific days in the month in a given time interval.
struct DataSourceRefreshMonthlySchedule {
@optional:
	/// The start time of a time interval in which a data source refresh is scheduled. Only `hours` part is used. The time interval size defaults to that in the Sheets editor.
	TimeOfDay startTime;
	/// Days of the month to refresh. Only 1-28 are supported, mapping to the 1st to the 28th day. At least one day must be specified.
	int[ ] daysOfMonth;
}

/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
struct Interval {
	/// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
	@embedNullable @dateTime Nullable!string endTime;
	/// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
	@embedNullable @dateTime Nullable!string startTime;
}

/// The request for retrieving a Spreadsheet.
struct GetSpreadsheetByDataFilterRequest {
@optional:
	/// True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
	Ternary includeGridData;
	/// The DataFilters used to select which ranges to retrieve from the spreadsheet.
	DataFilter[ ] dataFilters;
}

/// The request for updating any aspect of a spreadsheet.
struct BatchUpdateSpreadsheetRequest {
@optional:
	/// Determines if the update response should include the spreadsheet resource.
	Ternary includeSpreadsheetInResponse;
	/// True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.
	Ternary responseIncludeGridData;
	/// A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
	Request[ ] requests;
	/// Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.
	string[ ] responseRanges;
}

/// A single kind of update to apply to a spreadsheet.
struct Request {
@optional:
	/// Adds a new banded range
	AddBandingRequest addBanding;
	/// Adds a chart.
	AddChartRequest addChart;
	/// Adds a new conditional format rule.
	AddConditionalFormatRuleRequest addConditionalFormatRule;
	/// Adds a data source.
	AddDataSourceRequest addDataSource;
	/// Creates a group over the specified range.
	AddDimensionGroupRequest addDimensionGroup;
	/// Adds a filter view.
	AddFilterViewRequest addFilterView;
	/// Adds a named range.
	AddNamedRangeRequest addNamedRange;
	/// Adds a protected range.
	AddProtectedRangeRequest addProtectedRange;
	/// Adds a sheet.
	AddSheetRequest addSheet;
	/// Adds a slicer.
	AddSlicerRequest addSlicer;
	/// Appends cells after the last row with data in a sheet.
	AppendCellsRequest appendCells;
	/// Appends dimensions to the end of a sheet.
	AppendDimensionRequest appendDimension;
	/// Automatically fills in more data based on existing data.
	AutoFillRequest autoFill;
	/// Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
	AutoResizeDimensionsRequest autoResizeDimensions;
	/// Clears the basic filter on a sheet.
	ClearBasicFilterRequest clearBasicFilter;
	/// Copies data from one area and pastes it to another.
	CopyPasteRequest copyPaste;
	/// Creates new developer metadata
	CreateDeveloperMetadataRequest createDeveloperMetadata;
	/// Cuts data from one area and pastes it to another.
	CutPasteRequest cutPaste;
	/// Removes a banded range
	DeleteBandingRequest deleteBanding;
	/// Deletes an existing conditional format rule.
	DeleteConditionalFormatRuleRequest deleteConditionalFormatRule;
	/// Deletes a data source.
	DeleteDataSourceRequest deleteDataSource;
	/// Deletes developer metadata
	DeleteDeveloperMetadataRequest deleteDeveloperMetadata;
	/// Deletes rows or columns in a sheet.
	DeleteDimensionRequest deleteDimension;
	/// Deletes a group over the specified range.
	DeleteDimensionGroupRequest deleteDimensionGroup;
	/// Removes rows containing duplicate values in specified columns of a cell range.
	DeleteDuplicatesRequest deleteDuplicates;
	/// Deletes an embedded object (e.g, chart, image) in a sheet.
	DeleteEmbeddedObjectRequest deleteEmbeddedObject;
	/// Deletes a filter view from a sheet.
	DeleteFilterViewRequest deleteFilterView;
	/// Deletes a named range.
	DeleteNamedRangeRequest deleteNamedRange;
	/// Deletes a protected range.
	DeleteProtectedRangeRequest deleteProtectedRange;
	/// Deletes a range of cells from a sheet, shifting the remaining cells.
	DeleteRangeRequest deleteRange;
	/// Deletes a sheet.
	DeleteSheetRequest deleteSheet;
	/// Duplicates a filter view.
	DuplicateFilterViewRequest duplicateFilterView;
	/// Duplicates a sheet.
	DuplicateSheetRequest duplicateSheet;
	/// Finds and replaces occurrences of some text with other text.
	FindReplaceRequest findReplace;
	/// Inserts new rows or columns in a sheet.
	InsertDimensionRequest insertDimension;
	/// Inserts new cells in a sheet, shifting the existing cells.
	InsertRangeRequest insertRange;
	/// Merges cells together.
	MergeCellsRequest mergeCells;
	/// Moves rows or columns to another location in a sheet.
	MoveDimensionRequest moveDimension;
	/// Pastes data (HTML or delimited) into a sheet.
	PasteDataRequest pasteData;
	/// Randomizes the order of the rows in a range.
	RandomizeRangeRequest randomizeRange;
	/// Refreshes one or multiple data sources and associated dbobjects.
	RefreshDataSourceRequest refreshDataSource;
	/// Repeats a single cell across a range.
	RepeatCellRequest repeatCell;
	/// Sets the basic filter on a sheet.
	SetBasicFilterRequest setBasicFilter;
	/// Sets data validation for one or more cells.
	SetDataValidationRequest setDataValidation;
	/// Sorts data in a range.
	SortRangeRequest sortRange;
	/// Converts a column of text into many columns of text.
	TextToColumnsRequest textToColumns;
	/// Trims cells of whitespace (such as spaces, tabs, or new lines).
	TrimWhitespaceRequest trimWhitespace;
	/// Unmerges merged cells.
	UnmergeCellsRequest unmergeCells;
	/// Updates a banded range
	UpdateBandingRequest updateBanding;
	/// Updates the borders in a range of cells.
	UpdateBordersRequest updateBorders;
	/// Updates many cells at once.
	UpdateCellsRequest updateCells;
	/// Updates a chart's specifications.
	UpdateChartSpecRequest updateChartSpec;
	/// Updates an existing conditional format rule.
	UpdateConditionalFormatRuleRequest updateConditionalFormatRule;
	/// Updates a data source.
	UpdateDataSourceRequest updateDataSource;
	/// Updates an existing developer metadata entry
	UpdateDeveloperMetadataRequest updateDeveloperMetadata;
	/// Updates the state of the specified group.
	UpdateDimensionGroupRequest updateDimensionGroup;
	/// Updates dimensions' properties.
	UpdateDimensionPropertiesRequest updateDimensionProperties;
	/// Updates an embedded object's border.
	UpdateEmbeddedObjectBorderRequest updateEmbeddedObjectBorder;
	/// Updates an embedded object's (e.g. chart, image) position.
	UpdateEmbeddedObjectPositionRequest updateEmbeddedObjectPosition;
	/// Updates the properties of a filter view.
	UpdateFilterViewRequest updateFilterView;
	/// Updates a named range.
	UpdateNamedRangeRequest updateNamedRange;
	/// Updates a protected range.
	UpdateProtectedRangeRequest updateProtectedRange;
	/// Updates a sheet's properties.
	UpdateSheetPropertiesRequest updateSheetProperties;
	/// Updates a slicer's specifications.
	UpdateSlicerSpecRequest updateSlicerSpec;
	/// Updates the spreadsheet's properties.
	UpdateSpreadsheetPropertiesRequest updateSpreadsheetProperties;
}

/// Updates properties of a spreadsheet.
struct UpdateSpreadsheetPropertiesRequest {
	/// The properties to update.
	@optional SpreadsheetProperties properties;
	/// The fields that should be updated. At least one field must be specified. The root 'properties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Updates properties of the sheet with the specified sheetId.
struct UpdateSheetPropertiesRequest {
	/// The properties to update.
	@optional SheetProperties properties;
	/// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Updates properties of dimensions within the specified range.
struct UpdateDimensionPropertiesRequest {
@optional:
	/// The columns on a data source sheet to update.
	DataSourceSheetDimensionRange dataSourceSheetRange;
	/// Properties to update.
	DimensionProperties properties;
	/// The rows or columns to update.
	DimensionRange range;
	/// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// A range along a single dimension on a DATA_SOURCE sheet.
struct DataSourceSheetDimensionRange {
	/// The columns on the data source sheet.
	@optional DataSourceColumnReference[ ] columnReferences;
	/// The ID of the data source sheet the range is on.
	@embedNullable Nullable!int sheetId;
}

/// Updates properties of the named range with the specified namedRangeId.
struct UpdateNamedRangeRequest {
	/// The named range to update with the new properties.
	@optional NamedRange namedRange;
	/// The fields that should be updated. At least one field must be specified. The root `namedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged. If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`. To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
struct RepeatCellRequest {
@optional:
	/// The data to write.
	CellData cell;
	/// The range to repeat the cell in.
	GridRange range;
	/// The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Adds a named range to the spreadsheet.
struct AddNamedRangeRequest {
	/// The named range to add. The namedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
	@optional NamedRange namedRange;
}

/// Removes the named range with the given ID from the spreadsheet.
struct DeleteNamedRangeRequest {
	/// The ID of the named range to delete.
	@embedNullable Nullable!string namedRangeId;
}

/// Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
struct AddSheetRequest {
	/// The properties the new sheet should have. All properties are optional. The sheetId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a sheet that already exists.)
	@optional SheetProperties properties;
}

/// Deletes the requested sheet.
struct DeleteSheetRequest {
	/// The ID of the sheet to delete. If the sheet is of DATA_SOURCE type, the associated DataSource is also deleted.
	@embedNullable Nullable!int sheetId;
}

/// Fills in more data based on existing data.
struct AutoFillRequest {
@optional:
	/// The range to autofill. This will examine the range and detect the location that has data and automatically fill that data in to the rest of the range.
	GridRange range;
	/// The source and destination areas to autofill. This explicitly lists the source of the autofill and where to extend that data.
	SourceAndDestination sourceAndDestination;
	/// True if we should generate data with the "alternate" series. This differs based on the type and amount of source data.
	Ternary useAlternateSeries;
}

/// A combination of a source range and how to extend that source.
struct SourceAndDestination {
@optional:
	/// The location of the data to use as the source of the autofill.
	GridRange source;
	/// The dimension that data should be filled into.
	@byName Dimension dimension;
	alias Dimension = .MajorDimension; /// ditto
	/// The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.
	@embedNullable Nullable!int fillLength;
}

/// Moves data from the source to the destination.
struct CutPasteRequest {
@optional:
	/// The top-left coordinate where the data should be pasted.
	GridCoordinate destination;
	/// The source data to cut.
	GridRange source;
	/// What kind of data to paste. All the source data will be cut, regardless of what is pasted.
	@byName PasteType pasteType;
	alias PasteType = .PasteType; /// ditto
}

/// Copies data from the source to the destination.
struct CopyPasteRequest {
@optional:
	/// The location to paste to. If the range covers a span that's a multiple of the source's height or width, then the data will be repeated to fill in the destination range. If the range is smaller than the source range, the entire source data will still be copied (beyond the end of the destination range).
	GridRange destination;
	/// The source range to copy.
	GridRange source;
	/// How that data should be oriented when pasting.
	@byName PasteOrientation pasteOrientation;
	alias PasteOrientation = .PasteOrientation; /// ditto
	/// What kind of data to paste.
	@byName PasteType pasteType;
	alias PasteType = .PasteType; /// ditto
}

/// Merges all cells in the range.
struct MergeCellsRequest {
@optional:
	/// The range of cells to merge.
	GridRange range;
	/// How the cells should be merged.
	@byName MergeType mergeType;
	alias MergeType = .MergeType; /// ditto
}

/// Unmerges cells in the given range.
struct UnmergeCellsRequest {
	/// The range within which all cells should be unmerged. If the range spans multiple merges, all will be unmerged. The range must not partially span any merge.
	@optional GridRange range;
}

/// Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
struct UpdateBordersRequest {
@optional:
	/// The border to put at the bottom of the range.
	Border bottom;
	/// The horizontal border to put within the range.
	Border innerHorizontal;
	/// The vertical border to put within the range.
	Border innerVertical;
	/// The border to put at the left of the range.
	Border left;
	/// The range whose borders should be updated.
	GridRange range;
	/// The border to put at the right of the range.
	Border right;
	/// The border to put at the top of the range.
	Border top;
}

/// Updates all cells in a range with new data.
struct UpdateCellsRequest {
@optional:
	/// The range to write data to. If the data in rows does not cover the entire requested range, the fields matching those set in fields will be cleared.
	GridRange range;
	/// The coordinate to start writing data at. Any number of rows and columns (including a different number of columns per row) may be written.
	GridCoordinate start;
	/// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
	/// The data to write.
	RowData[ ] rows;
}

/// Adds a filter view.
struct AddFilterViewRequest {
	/// The filter to add. The filterViewId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a filter that already exists.)
	@optional FilterView filter;
}

/// Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
struct AppendCellsRequest {
	/// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
	/// The data to append.
	@optional RowData[ ] rows;
	/// The sheet ID to append the data to.
	@embedNullable Nullable!int sheetId;
}

/// Clears the basic filter, if any exists on the sheet.
struct ClearBasicFilterRequest {
	/// The sheet ID on which the basic filter should be cleared.
	@embedNullable Nullable!int sheetId;
}

/// Deletes the dimensions from the sheet.
struct DeleteDimensionRequest {
	/// The dimensions to delete from the sheet.
	@optional DimensionRange range;
}

/// Deletes the embedded object with the given ID.
struct DeleteEmbeddedObjectRequest {
	/// The ID of the embedded object to delete.
	@embedNullable Nullable!int objectId;
}

/// Deletes a particular filter view.
struct DeleteFilterViewRequest {
	/// The ID of the filter to delete.
	@embedNullable Nullable!int filterId;
}

/// Duplicates a particular filter view.
struct DuplicateFilterViewRequest {
	/// The ID of the filter being duplicated.
	@embedNullable Nullable!int filterId;
}

/// Duplicates the contents of a sheet.
struct DuplicateSheetRequest {
	/// The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
	@embedNullable Nullable!int insertSheetIndex;
	/// If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
	@embedNullable Nullable!int newSheetId;
	/// The name of the new sheet. If empty, a new name is chosen for you.
	@embedNullable Nullable!string newSheetName;
	/// The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.
	@embedNullable Nullable!int sourceSheetId;
}

/// Finds and replaces data in cells over a range, sheet, or all sheets.
struct FindReplaceRequest {
@optional:
	/// The range to find/replace over.
	GridRange range;
	/// True to find/replace over all sheets.
	Ternary allSheets;
	/// True if the search should include cells with formulas. False to skip cells with formulas.
	Ternary includeFormulas;
	/// True if the search is case sensitive.
	Ternary matchCase;
	/// True if the find value should match the entire cell.
	Ternary matchEntireCell;
	/// True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `"Google Sheets"` and another has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of `"$1 Rocks"` would change the contents of the cells to `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
	Ternary searchByRegex;
	/// The value to search.
	@embedNullable Nullable!string find;
	/// The value to use as the replacement.
	@embedNullable Nullable!string replacement;
	/// The sheet to find/replace over.
	@embedNullable Nullable!int sheetId;
}

/// Inserts rows or columns in a sheet at a particular index.
struct InsertDimensionRequest {
@optional:
	/// The dimensions to insert. Both the start and end indexes must be bounded.
	DimensionRange range;
	/// Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after. For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background. If `inheritFromBefore` is true, the two new rows will be red (because the row before the insertion point was red), whereas if `inheritFromBefore` is false, the two new rows will be green (because the row after the insertion point was green).
	Ternary inheritFromBefore;
}

/// Inserts cells into a range, shifting the existing cells over or down.
struct InsertRangeRequest {
@optional:
	/// The range to insert new cells into.
	GridRange range;
	/// The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
	@byName ShiftDimension shiftDimension;
	alias ShiftDimension = .MajorDimension; /// ditto
}

/// Moves one or more rows or columns.
struct MoveDimensionRequest {
	/// The source dimensions to move.
	@optional DimensionRange source;
	/// The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `"1"` and `"2"` to between `"3"` and `"4"`, the source would be `ROWS [1..3)`,and the destination index would be `"4"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
	@embedNullable Nullable!int destinationIndex;
}

/// Update an embedded object's position (such as a moving or resizing a chart or image).
struct UpdateEmbeddedObjectPositionRequest {
	/// An explicit position to move the embedded object to. If newPosition.sheetId is set, a new sheet with that ID will be created. If newPosition.newSheet is set to true, a new sheet will be created with an ID that will be chosen for you.
	@optional EmbeddedObjectPosition newPosition;
	/// The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified. The root `newPosition.overlayPosition` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
	/// The ID of the object to moved.
	@embedNullable Nullable!int objectId;
}

/// Inserts data into the spreadsheet starting at the specified coordinate.
struct PasteDataRequest {
@optional:
	/// The coordinate at which the data should start being inserted.
	GridCoordinate coordinate;
	/// True if the data is HTML.
	Ternary html;
	/// How the data should be pasted.
	@byName Type type;
	alias Type = .PasteType; /// ditto
	/// The data to insert.
	@embedNullable Nullable!string data;
	/// The delimiter in the data.
	@embedNullable Nullable!string delimiter;
}

/// Splits a column of text into multiple columns, based on a delimiter in each cell.
struct TextToColumnsRequest {
@optional:
	/// The source data range. This must span exactly one column.
	GridRange source;
	/// The delimiter type to use.
	@byName DelimiterType delimiterType;
	alias DelimiterType = .DelimiterType; /// ditto
	/// The delimiter to use. Used only if delimiterType is CUSTOM.
	@embedNullable Nullable!string delimiter;
}

/// Updates properties of the filter view.
struct UpdateFilterViewRequest {
	/// The new properties of the filter view.
	@optional FilterView filter;
	/// The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Deletes a range of cells, shifting other cells into the deleted area.
struct DeleteRangeRequest {
@optional:
	/// The range of cells to delete.
	GridRange range;
	/// The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
	@byName ShiftDimension shiftDimension;
	alias ShiftDimension = .MajorDimension; /// ditto
}

/// Appends rows or columns to the end of a sheet.
struct AppendDimensionRequest {
	/// Whether rows or columns should be appended.
	@optional @byName Dimension dimension;
	alias Dimension = .MajorDimension; /// ditto
	/// The number of rows or columns to append.
	@embedNullable Nullable!int length;
	/// The sheet to append rows or columns to.
	@embedNullable Nullable!int sheetId;
}

/// Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
struct AddConditionalFormatRuleRequest {
	/// The rule to add.
	@optional ConditionalFormatRule rule;
	/// The zero-based index where the rule should be inserted.
	@embedNullable Nullable!int index;
}

/// Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
struct UpdateConditionalFormatRuleRequest {
	/// The rule that should replace the rule at the given index.
	@optional ConditionalFormatRule rule;
	/// The zero-based index of the rule that should be replaced or moved.
	@embedNullable Nullable!int index;
	/// The zero-based new index the rule should end up at.
	@embedNullable Nullable!int newIndex;
	/// The sheet of the rule to move. Required if new_index is set, unused otherwise.
	@embedNullable Nullable!int sheetId;
}

/// Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
struct DeleteConditionalFormatRuleRequest {
	/// The zero-based index of the rule to be deleted.
	@embedNullable Nullable!int index;
	/// The sheet the rule is being deleted from.
	@embedNullable Nullable!int sheetId;
}

/// Sorts data in rows based on a sort order per column.
struct SortRangeRequest {
@optional:
	/// The range to sort.
	GridRange range;
	/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
	SortSpec[ ] sortSpecs;
}

/// Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
struct SetDataValidationRequest {
@optional:
	/// The range the data validation rule should apply to.
	GridRange range;
	/// The data validation rule to set on each cell in the range, or empty to clear the data validation in the range.
	DataValidationRule rule;
}

/// Sets the basic filter associated with a sheet.
struct SetBasicFilterRequest {
	/// The filter to set.
	@optional BasicFilter filter;
}

/// Adds a new protected range.
struct AddProtectedRangeRequest {
	/// The protected range to be added. The protectedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
	@optional ProtectedRange protectedRange;
}

/// Updates an existing protected range with the specified protectedRangeId.
struct UpdateProtectedRangeRequest {
	/// The protected range to update with the new properties.
	@optional ProtectedRange protectedRange;
	/// The fields that should be updated. At least one field must be specified. The root `protectedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Deletes the protected range with the given ID.
struct DeleteProtectedRangeRequest {
	/// The ID of the protected range to delete.
	@embedNullable Nullable!int protectedRangeId;
}

/// Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
struct AutoResizeDimensionsRequest {
@optional:
	/// The dimensions on a data source sheet to automatically resize.
	DataSourceSheetDimensionRange dataSourceSheetDimensions;
	/// The dimensions to automatically resize.
	DimensionRange dimensions;
}

/// Adds a chart to a sheet in the spreadsheet.
struct AddChartRequest {
	/// The chart that should be added to the spreadsheet, including the position where it should be placed. The chartId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of an embedded object that already exists.)
	@optional EmbeddedChart chart;
}

/// Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use UpdateEmbeddedObjectPositionRequest.)
struct UpdateChartSpecRequest {
	/// The specification to apply to the chart.
	@optional ChartSpec spec;
	/// The ID of the chart to update.
	@embedNullable Nullable!int chartId;
}

/// Updates properties of the supplied banded range.
struct UpdateBandingRequest {
	/// The banded range to update with the new properties.
	@optional BandedRange bandedRange;
	/// The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Adds a new banded range to the spreadsheet.
struct AddBandingRequest {
	/// The banded range to add. The bandedRangeId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a range that already exists.)
	@optional BandedRange bandedRange;
}

/// Removes the banded range with the given ID from the spreadsheet.
struct DeleteBandingRequest {
	/// The ID of the banded range to delete.
	@embedNullable Nullable!int bandedRangeId;
}

/// A request to create developer metadata.
struct CreateDeveloperMetadataRequest {
	/// The developer metadata to create.
	@optional DeveloperMetadata developerMetadata;
}

/// A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
struct UpdateDeveloperMetadataRequest {
@optional:
	/// The value that all metadata matched by the data filters will be updated to.
	DeveloperMetadata developerMetadata;
	/// The filters matching the developer metadata entries to update.
	DataFilter[ ] dataFilters;
	/// The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// A request to delete developer metadata.
struct DeleteDeveloperMetadataRequest {
	/// The data filter describing the criteria used to select which developer metadata entry to delete.
	@optional DataFilter dataFilter;
}

/// Randomizes the order of the rows in a range.
struct RandomizeRangeRequest {
	/// The range to randomize.
	@optional GridRange range;
}

/// Creates a group over the specified range. If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
struct AddDimensionGroupRequest {
	/// The range over which to create a group.
	@optional DimensionRange range;
}

/// Deletes a group over the specified range by decrementing the depth of the dimensions in the range. For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
struct DeleteDimensionGroupRequest {
	/// The range of the group to be deleted.
	@optional DimensionRange range;
}

/// Updates the state of the specified group.
struct UpdateDimensionGroupRequest {
	/// The group whose state should be updated. The range and depth of the group should specify a valid group on the sheet, and all other fields updated.
	@optional DimensionGroup dimensionGroup;
	/// The fields that should be updated. At least one field must be specified. The root `dimensionGroup` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Trims the whitespace (such as spaces, tabs, or new lines) in every cell in the specified range. This request removes all whitespace from the start and end of each cell's text, and reduces any subsequence of remaining whitespace characters to a single space. If the resulting trimmed text starts with a '+' or '=' character, the text remains as a string value and isn't interpreted as a formula.
struct TrimWhitespaceRequest {
	/// The range whose cells to trim.
	@optional GridRange range;
}

/// Removes rows within this range that contain values in the specified columns that are duplicates of values in any previous row. Rows with identical values but different letter cases, formatting, or formulas are considered to be duplicates. This request also removes duplicate rows hidden from view (for example, due to a filter). When removing duplicates, the first instance of each duplicate row scanning from the top downwards is kept in the resulting range. Content outside of the specified range isn't removed, and rows considered duplicates do not have to be adjacent to each other in the range.
struct DeleteDuplicatesRequest {
@optional:
	/// The range to remove duplicates rows from.
	GridRange range;
	/// The columns in the range to analyze for duplicate values. If no columns are selected then all columns are analyzed for duplicates.
	DimensionRange[ ] comparisonColumns;
}

/// Updates an embedded object's border property.
struct UpdateEmbeddedObjectBorderRequest {
	/// The border that applies to the embedded object.
	@optional EmbeddedObjectBorder border;
	/// The fields that should be updated. At least one field must be specified. The root `border` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
	/// The ID of the embedded object to update.
	@embedNullable Nullable!int objectId;
}

/// Adds a slicer to a sheet in the spreadsheet.
struct AddSlicerRequest {
	/// The slicer that should be added to the spreadsheet, including the position where it should be placed. The slicerId field is optional; if one is not set, an id will be randomly generated. (It is an error to specify the ID of a slicer that already exists.)
	@optional Slicer slicer;
}

/// Updates a slicer's specifications. (This does not move or resize a slicer. To move or resize a slicer use UpdateEmbeddedObjectPositionRequest.
struct UpdateSlicerSpecRequest {
	/// The specification to apply to the slicer.
	@optional SlicerSpec spec;
	/// The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single "*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
	/// The id of the slicer to update.
	@embedNullable Nullable!int slicerId;
}

/// Adds a data source. After the data source is added successfully, an associated DATA_SOURCE sheet is created and an execution is triggered to refresh the sheet to read data from the data source. The request requires an additional `bigquery.readonly` OAuth scope.
struct AddDataSourceRequest {
	/// The data source to add.
	@optional DataSource dataSource;
}

/// Updates a data source. After the data source is updated successfully, an execution is triggered to refresh the associated DATA_SOURCE sheet to read data from the updated data source. The request requires an additional `bigquery.readonly` OAuth scope.
struct UpdateDataSourceRequest {
	/// The data source to update.
	@optional DataSource dataSource;
	/// The fields that should be updated. At least one field must be specified. The root `dataSource` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
	@embedNullable @fieldMask Nullable!string fields;
}

/// Deletes a data source. The request also deletes the associated data source sheet, and unlinks all associated data source objects.
struct DeleteDataSourceRequest {
	/// The ID of the data source to delete.
	@embedNullable Nullable!string dataSourceId;
}

/// Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional `bigquery.readonly` OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
struct RefreshDataSourceRequest {
@optional:
	/// References to data source objects to refresh.
	DataSourceObjectReferences references;
	/// Refreshes the data source objects regardless of the current state. If not set and a referenced data source object was in error state, the refresh will fail immediately.
	Ternary force;
	/// Refreshes all existing data source objects in the spreadsheet.
	Ternary isAll;
	/// Reference to a DataSource. If specified, refreshes all associated data source objects for the data source.
	@embedNullable Nullable!string dataSourceId;
}

/// A list of references to data source objects.
struct DataSourceObjectReferences {
	/// The references.
	@optional DataSourceObjectReference[ ] references;
}

/// Reference to a data source object.
struct DataSourceObjectReference {
@optional:
	/// References to a cell containing DataSourceFormula.
	GridCoordinate dataSourceFormulaCell;
	/// References to a data source PivotTable anchored at the cell.
	GridCoordinate dataSourcePivotTableAnchorCell;
	/// References to a DataSourceTable anchored at the cell.
	GridCoordinate dataSourceTableAnchorCell;
	/// References to a data source chart.
	@embedNullable Nullable!int chartId;
	/// References to a DATA_SOURCE sheet.
	@embedNullable Nullable!string sheetId;
}

/// The reply for batch updating a spreadsheet.
struct BatchUpdateSpreadsheetResponse {
@optional:
	/// The spreadsheet after updates were applied. This is only set if BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response is `true`.
	Spreadsheet updatedSpreadsheet;
	/// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
	Response[ ] replies;
	/// The spreadsheet the updates were applied to.
	@embedNullable Nullable!string spreadsheetId;
}

/// A single response from an update.
struct Response {
@optional:
	/// A reply from adding a banded range.
	AddBandingResponse addBanding;
	/// A reply from adding a chart.
	AddChartResponse addChart;
	/// A reply from adding a data source.
	AddDataSourceResponse addDataSource;
	/// A reply from adding a dimension group.
	AddDimensionGroupResponse addDimensionGroup;
	/// A reply from adding a filter view.
	AddFilterViewResponse addFilterView;
	/// A reply from adding a named range.
	AddNamedRangeResponse addNamedRange;
	/// A reply from adding a protected range.
	AddProtectedRangeResponse addProtectedRange;
	/// A reply from adding a sheet.
	AddSheetResponse addSheet;
	/// A reply from adding a slicer.
	AddSlicerResponse addSlicer;
	/// A reply from creating a developer metadata entry.
	CreateDeveloperMetadataResponse createDeveloperMetadata;
	/// A reply from deleting a conditional format rule.
	DeleteConditionalFormatRuleResponse deleteConditionalFormatRule;
	/// A reply from deleting a developer metadata entry.
	DeleteDeveloperMetadataResponse deleteDeveloperMetadata;
	/// A reply from deleting a dimension group.
	DeleteDimensionGroupResponse deleteDimensionGroup;
	/// A reply from removing rows containing duplicate values.
	DeleteDuplicatesResponse deleteDuplicates;
	/// A reply from duplicating a filter view.
	DuplicateFilterViewResponse duplicateFilterView;
	/// A reply from duplicating a sheet.
	DuplicateSheetResponse duplicateSheet;
	/// A reply from doing a find/replace.
	FindReplaceResponse findReplace;
	/// A reply from refreshing data source objects.
	RefreshDataSourceResponse refreshDataSource;
	/// A reply from trimming whitespace.
	TrimWhitespaceResponse trimWhitespace;
	/// A reply from updating a conditional format rule.
	UpdateConditionalFormatRuleResponse updateConditionalFormatRule;
	/// A reply from updating a data source.
	UpdateDataSourceResponse updateDataSource;
	/// A reply from updating a developer metadata entry.
	UpdateDeveloperMetadataResponse updateDeveloperMetadata;
	/// A reply from updating an embedded object's position.
	UpdateEmbeddedObjectPositionResponse updateEmbeddedObjectPosition;
}

/// The result of adding a named range.
struct AddNamedRangeResponse {
	/// The named range to add.
	@optional NamedRange namedRange;
}

/// The result of adding a sheet.
struct AddSheetResponse {
	/// The properties of the newly added sheet.
	@optional SheetProperties properties;
}

/// The result of adding a filter view.
struct AddFilterViewResponse {
	/// The newly added filter view.
	@optional FilterView filter;
}

/// The result of a filter view being duplicated.
struct DuplicateFilterViewResponse {
	/// The newly created filter.
	@optional FilterView filter;
}

/// The result of duplicating a sheet.
struct DuplicateSheetResponse {
	/// The properties of the duplicate sheet.
	@optional SheetProperties properties;
}

/// The result of the find/replace.
struct FindReplaceResponse {
	/// The number of formula cells changed.
	@embedNullable Nullable!int formulasChanged;
	/// The number of occurrences (possibly multiple within a cell) changed. For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
	@embedNullable Nullable!int occurrencesChanged;
	/// The number of rows changed.
	@embedNullable Nullable!int rowsChanged;
	/// The number of sheets changed.
	@embedNullable Nullable!int sheetsChanged;
	/// The number of non-formula cells changed.
	@embedNullable Nullable!int valuesChanged;
}

/// The result of updating an embedded object's position.
struct UpdateEmbeddedObjectPositionResponse {
	/// The new position of the embedded object.
	@optional EmbeddedObjectPosition position;
}

/// The result of updating a conditional format rule.
struct UpdateConditionalFormatRuleResponse {
@optional:
	/// The new rule that replaced the old rule (if replacing), or the rule that was moved (if moved)
	ConditionalFormatRule newRule;
	/// The old (deleted) rule. Not set if a rule was moved (because it is the same as new_rule).
	ConditionalFormatRule oldRule;
	/// The index of the new rule.
	@embedNullable Nullable!int newIndex;
	/// The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
	@embedNullable Nullable!int oldIndex;
}

/// The result of deleting a conditional format rule.
struct DeleteConditionalFormatRuleResponse {
	/// The rule that was deleted.
	@optional ConditionalFormatRule rule;
}

/// The result of adding a new protected range.
struct AddProtectedRangeResponse {
	/// The newly added protected range.
	@optional ProtectedRange protectedRange;
}

/// The result of adding a chart to a spreadsheet.
struct AddChartResponse {
	/// The newly added chart.
	@optional EmbeddedChart chart;
}

/// The result of adding a banded range.
struct AddBandingResponse {
	/// The banded range that was added.
	@optional BandedRange bandedRange;
}

/// The response from creating developer metadata.
struct CreateDeveloperMetadataResponse {
	/// The developer metadata that was created.
	@optional DeveloperMetadata developerMetadata;
}

/// The response from updating developer metadata.
struct UpdateDeveloperMetadataResponse {
	/// The updated developer metadata.
	@optional DeveloperMetadata[ ] developerMetadata;
}

/// The response from deleting developer metadata.
struct DeleteDeveloperMetadataResponse {
	/// The metadata that was deleted.
	@optional DeveloperMetadata[ ] deletedDeveloperMetadata;
}

/// The result of adding a group.
struct AddDimensionGroupResponse {
	/// All groups of a dimension after adding a group to that dimension.
	@optional DimensionGroup[ ] dimensionGroups;
}

/// The result of deleting a group.
struct DeleteDimensionGroupResponse {
	/// All groups of a dimension after deleting a group from that dimension.
	@optional DimensionGroup[ ] dimensionGroups;
}

/// The result of trimming whitespace in cells.
struct TrimWhitespaceResponse {
	/// The number of cells that were trimmed of whitespace.
	@embedNullable Nullable!int cellsChangedCount;
}

/// The result of removing duplicates in a range.
struct DeleteDuplicatesResponse {
	/// The number of duplicate rows removed.
	@embedNullable Nullable!int duplicatesRemovedCount;
}

/// The result of adding a slicer to a spreadsheet.
struct AddSlicerResponse {
	/// The newly added slicer.
	@optional Slicer slicer;
}

/// The result of adding a data source.
struct AddDataSourceResponse {
@optional:
	/// The data execution status.
	DataExecutionStatus dataExecutionStatus;
	/// The data source that was created.
	DataSource dataSource;
}

/// The response from updating data source.
struct UpdateDataSourceResponse {
@optional:
	/// The data execution status.
	DataExecutionStatus dataExecutionStatus;
	/// The updated data source.
	DataSource dataSource;
}

/// The response from refreshing one or multiple data source objects.
struct RefreshDataSourceResponse {
	/// All the refresh status for the data source object references specified in the request. If is_all is specified, the field contains only those in failure status.
	@optional RefreshDataSourceObjectExecutionStatus[ ] statuses;
}

/// The execution status of refreshing one data source object.
struct RefreshDataSourceObjectExecutionStatus {
@optional:
	/// The data execution status.
	DataExecutionStatus dataExecutionStatus;
	/// Reference to a data source object being refreshed.
	DataSourceObjectReference reference;
}

/// The request to copy a sheet across spreadsheets.
struct CopySheetToAnotherSpreadsheetRequest {
	/// The ID of the spreadsheet to copy the sheet to.
	@embedNullable Nullable!string destinationSpreadsheetId;
}

///
struct CommonParameters {
@optional:
	/// V1 error format.
	@name(`$.xgafv`) @byName _Xgafv _xgafv;
	alias _Xgafv = ._Xgafv; /// ditto
	/// Data format for response.
	@byName Alt alt;
	alias Alt = P.Alt; /// ditto
	/// Returns response with indentations and line breaks.
	bool prettyPrint = true;
	/// OAuth access token.
	@embedNullable @name(`access_token`) Nullable!string accessToken;
	/// JSONP
	@embedNullable Nullable!string callback;
	/// Selector specifying which fields to include in a partial response.
	@embedNullable Nullable!string fields;
	/// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	@embedNullable Nullable!string key;
	/// OAuth 2.0 token for the current user.
	@embedNullable @name(`oauth_token`) Nullable!string oauthToken;
	/// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	@embedNullable Nullable!string quotaUser;
	/// Legacy upload protocol for media (e.g. "media", "multipart").
	@embedNullable Nullable!string uploadType;
	/// Upload protocol for media (e.g. "raw", "multipart").
	@embedNullable @name(`upload_protocol`) Nullable!string uploadProtocol;
}

///
struct GoogleClient {
	GoogleHttpClient client; ///
	CommonParameters params; ///
}
