// Autogenerated by discovery-gen v0.x.
module google_api.sheets.d_serialization;

import std.conv: toChars;
import std.math.traits: isNaN;
import std.typecons: Ternary;
import vibe.data.json: serializeToJsonString;
import google_api.d.serialization;
import google_api.sheets.d_types;

nothrow pure @safe:

private alias m = google_api.sheets.d_serialization;

immutable {
	string[3] enumMemberNames(_: P.Alt) = [`json`, `media`, `proto`];
	string[2] enumMemberNames(_: _Xgafv) = [`1`, `2`];
	string[3] enumMemberNames(_: MajorDimension) = [`DIMENSION_UNSPECIFIED`, `ROWS`, `COLUMNS`];
	string[3] enumMemberNames(_: ValueInputOption) = [`INPUT_VALUE_OPTION_UNSPECIFIED`, `RAW`, `USER_ENTERED`];
	string[3] enumMemberNames(_: ResponseValueRenderOption) = [`FORMATTED_VALUE`, `UNFORMATTED_VALUE`, `FORMULA`];
	string[2] enumMemberNames(_: ResponseDateTimeRenderOption) = [`SERIAL_NUMBER`, `FORMATTED_STRING`];
	string[5] enumMemberNames(_: LocationType) = [`DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED`, `ROW`, `COLUMN`, `SHEET`, `SPREADSHEET`];
	string[3] enumMemberNames(_: LocationMatchingStrategy) = [`DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED`, `EXACT_LOCATION`, `INTERSECTING_LOCATION`];
	string[3] enumMemberNames(_: Visibility) = [`DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED`, `DOCUMENT`, `PROJECT`];
	string[4] enumMemberNames(_: AutoRecalc) = [`RECALCULATION_INTERVAL_UNSPECIFIED`, `ON_CHANGE`, `MINUTE`, `HOUR`];
	string[4] enumMemberNames(_: HorizontalAlignment) = [`HORIZONTAL_ALIGN_UNSPECIFIED`, `LEFT`, `CENTER`, `RIGHT`];
	string[4] enumMemberNames(_: VerticalAlignment) = [`VERTICAL_ALIGN_UNSPECIFIED`, `TOP`, `MIDDLE`, `BOTTOM`];
	string[5] enumMemberNames(_: WrapStrategy) = [`WRAP_STRATEGY_UNSPECIFIED`, `OVERFLOW_CELL`, `LEGACY_WRAP`, `CLIP`, `WRAP`];
	string[3] enumMemberNames(_: TextDirection) = [`TEXT_DIRECTION_UNSPECIFIED`, `LEFT_TO_RIGHT`, `RIGHT_TO_LEFT`];
	string[3] enumMemberNames(_: HyperlinkDisplayType) = [`HYPERLINK_DISPLAY_TYPE_UNSPECIFIED`, `LINKED`, `PLAIN_TEXT`];
	string[9] enumMemberNames(_: P.Type_0) = [`NUMBER_FORMAT_TYPE_UNSPECIFIED`, `TEXT`, `NUMBER`, `PERCENT`, `CURRENCY`, `DATE`, `TIME`, `DATE_TIME`, `SCIENTIFIC`];
	string[10] enumMemberNames(_: P.ThemeColor) = [`THEME_COLOR_TYPE_UNSPECIFIED`, `TEXT`, `BACKGROUND`, `ACCENT1`, `ACCENT2`, `ACCENT3`, `ACCENT4`, `ACCENT5`, `ACCENT6`, `LINK`];
	string[8] enumMemberNames(_: P.Style) = [`STYLE_UNSPECIFIED`, `DOTTED`, `DASHED`, `SOLID`, `SOLID_MEDIUM`, `SOLID_THICK`, `NONE`, `DOUBLE`];
	string[4] enumMemberNames(_: SheetType) = [`SHEET_TYPE_UNSPECIFIED`, `GRID`, `OBJECT`, `DATA_SOURCE`];
	string[5] enumMemberNames(_: P.State) = [`DATA_EXECUTION_STATE_UNSPECIFIED`, `NOT_STARTED`, `RUNNING`, `SUCCEEDED`, `FAILED`];
	string[19] enumMemberNames(_: ErrorCode) = [`DATA_EXECUTION_ERROR_CODE_UNSPECIFIED`, `TIMED_OUT`, `TOO_MANY_ROWS`, `TOO_MANY_COLUMNS`, `TOO_MANY_CELLS`, `ENGINE`, `PARAMETER_INVALID`, `UNSUPPORTED_DATA_TYPE`, `DUPLICATE_COLUMN_NAMES`, `INTERRUPTED`, `CONCURRENT_QUERY`, `OTHER`, `TOO_MANY_CHARS_PER_CELL`, `DATA_NOT_FOUND`, `PERMISSION_DENIED`, `MISSING_COLUMN_ALIAS`, `OBJECT_NOT_FOUND`, `OBJECT_IN_ERROR_STATE`, `OBJECT_SPEC_INVALID`];
	string[10] enumMemberNames(_: P.Type_1) = [`ERROR_TYPE_UNSPECIFIED`, `ERROR`, `NULL_VALUE`, `DIVIDE_BY_ZERO`, `VALUE`, `REF`, `NAME`, `NUM`, `N_A`, `LOADING`];
	string[33] enumMemberNames(_: P.Type_2) = [`CONDITION_TYPE_UNSPECIFIED`, `NUMBER_GREATER`, `NUMBER_GREATER_THAN_EQ`, `NUMBER_LESS`, `NUMBER_LESS_THAN_EQ`, `NUMBER_EQ`, `NUMBER_NOT_EQ`, `NUMBER_BETWEEN`, `NUMBER_NOT_BETWEEN`, `TEXT_CONTAINS`, `TEXT_NOT_CONTAINS`, `TEXT_STARTS_WITH`, `TEXT_ENDS_WITH`, `TEXT_EQ`, `TEXT_IS_EMAIL`, `TEXT_IS_URL`, `DATE_EQ`, `DATE_BEFORE`, `DATE_AFTER`, `DATE_ON_OR_BEFORE`, `DATE_ON_OR_AFTER`, `DATE_BETWEEN`, `DATE_NOT_BETWEEN`, `DATE_IS_VALID`, `ONE_OF_RANGE`, `ONE_OF_LIST`, `BLANK`, `NOT_BLANK`, `CUSTOM_FORMULA`, `BOOLEAN`, `TEXT_NOT_EQ`, `DATE_NOT_EQ`, `FILTER_EXPRESSION`];
	string[7] enumMemberNames(_: RelativeDate) = [`RELATIVE_DATE_UNSPECIFIED`, `PAST_YEAR`, `PAST_MONTH`, `PAST_WEEK`, `YESTERDAY`, `TODAY`, `TOMORROW`];
	string[2] enumMemberNames(_: ValueLayout) = [`HORIZONTAL`, `VERTICAL`];
	string[3] enumMemberNames(_: SortOrder) = [`SORT_ORDER_UNSPECIFIED`, `ASCENDING`, `DESCENDING`];
	string[16] enumMemberNames(_: P.Type_3) = [`DATE_TIME_RULE_TYPE_UNSPECIFIED`, `SECOND`, `MINUTE`, `HOUR`, `HOUR_MINUTE`, `HOUR_MINUTE_AMPM`, `DAY_OF_WEEK`, `DAY_OF_YEAR`, `DAY_OF_MONTH`, `DAY_MONTH`, `MONTH`, `QUARTER`, `YEAR`, `YEAR_MONTH`, `YEAR_QUARTER`, `YEAR_MONTH_DAY`];
	string[15] enumMemberNames(_: SummarizeFunction) = [`PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED`, `SUM`, `COUNTA`, `COUNT`, `COUNTUNIQUE`, `AVERAGE`, `MAX`, `MIN`, `MEDIAN`, `PRODUCT`, `STDEV`, `STDEVP`, `VAR`, `VARP`, `CUSTOM`];
	string[4] enumMemberNames(_: CalculatedDisplayType) = [`PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED`, `PERCENT_OF_ROW_TOTAL`, `PERCENT_OF_COLUMN_TOTAL`, `PERCENT_OF_GRAND_TOTAL`];
	string[3] enumMemberNames(_: ColumnSelectionType) = [`DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED`, `SELECTED`, `SYNC_ALL`];
	string[6] enumMemberNames(_: P.Type_4) = [`INTERPOLATION_POINT_TYPE_UNSPECIFIED`, `MIN`, `MAX`, `NUMBER`, `PERCENT`, `PERCENTILE`];
	string[5] enumMemberNames(_: HiddenDimensionStrategy) = [`CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED`, `SKIP_HIDDEN_ROWS_AND_COLUMNS`, `SKIP_HIDDEN_ROWS`, `SKIP_HIDDEN_COLUMNS`, `SHOW_ALL`];
	string[8] enumMemberNames(_: P.Type_5) = [`BASIC_CHART_TYPE_UNSPECIFIED`, `BAR`, `LINE`, `AREA`, `COLUMN`, `SCATTER`, `COMBO`, `STEPPED_AREA`];
	string[6] enumMemberNames(_: P.LegendPosition_0) = [`BASIC_CHART_LEGEND_POSITION_UNSPECIFIED`, `BOTTOM_LEGEND`, `LEFT_LEGEND`, `RIGHT_LEGEND`, `TOP_LEGEND`, `NO_LEGEND`];
	string[4] enumMemberNames(_: P.StackedType_0) = [`BASIC_CHART_STACKED_TYPE_UNSPECIFIED`, `NOT_STACKED`, `STACKED`, `PERCENT_STACKED`];
	string[3] enumMemberNames(_: CompareMode) = [`BASIC_CHART_COMPARE_MODE_UNSPECIFIED`, `DATUM`, `CATEGORY`];
	string[4] enumMemberNames(_: P.TargetAxis) = [`BASIC_CHART_AXIS_POSITION_UNSPECIFIED`, `BOTTOM_AXIS`, `LEFT_AXIS`, `RIGHT_AXIS`];
	string[4] enumMemberNames(_: ViewWindowMode) = [`DEFAULT_VIEW_WINDOW_MODE`, `VIEW_WINDOW_MODE_UNSUPPORTED`, `EXPLICIT`, `PRETTY`];
	string[7] enumMemberNames(_: AggregateType) = [`CHART_AGGREGATE_TYPE_UNSPECIFIED`, `AVERAGE`, `COUNT`, `MAX`, `MEDIAN`, `MIN`, `SUM`];
	string[16] enumMemberNames(_: P.Type_6) = [`CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED`, `SECOND`, `MINUTE`, `HOUR`, `HOUR_MINUTE`, `HOUR_MINUTE_AMPM`, `DAY_OF_WEEK`, `DAY_OF_YEAR`, `DAY_OF_MONTH`, `DAY_MONTH`, `MONTH`, `QUARTER`, `YEAR`, `YEAR_MONTH`, `YEAR_QUARTER`, `YEAR_MONTH_DAY`];
	string[9] enumMemberNames(_: P.Type_7) = [`LINE_DASH_TYPE_UNSPECIFIED`, `INVISIBLE`, `CUSTOM`, `SOLID`, `DOTTED`, `MEDIUM_DASHED`, `MEDIUM_DASHED_DOTTED`, `LONG_DASHED`, `LONG_DASHED_DOTTED`];
	string[4] enumMemberNames(_: P.Type_8) = [`DATA_LABEL_TYPE_UNSPECIFIED`, `NONE`, `DATA`, `CUSTOM`];
	string[9] enumMemberNames(_: Placement) = [`DATA_LABEL_PLACEMENT_UNSPECIFIED`, `CENTER`, `LEFT`, `RIGHT`, `ABOVE`, `BELOW`, `INSIDE_END`, `INSIDE_BASE`, `OUTSIDE_END`];
	string[9] enumMemberNames(_: P.Shape) = [`POINT_SHAPE_UNSPECIFIED`, `CIRCLE`, `DIAMOND`, `HEXAGON`, `PENTAGON`, `SQUARE`, `STAR`, `TRIANGLE`, `X_MARK`];
	string[7] enumMemberNames(_: P.LegendPosition_1) = [`PIE_CHART_LEGEND_POSITION_UNSPECIFIED`, `BOTTOM_LEGEND`, `LEFT_LEGEND`, `RIGHT_LEGEND`, `TOP_LEGEND`, `NO_LEGEND`, `LABELED_LEGEND`];
	string[7] enumMemberNames(_: P.LegendPosition_2) = [`BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED`, `BOTTOM_LEGEND`, `LEFT_LEGEND`, `RIGHT_LEGEND`, `TOP_LEGEND`, `NO_LEGEND`, `INSIDE_LEGEND`];
	string[4] enumMemberNames(_: NodeSize) = [`ORG_CHART_LABEL_SIZE_UNSPECIFIED`, `SMALL`, `MEDIUM`, `LARGE`];
	string[7] enumMemberNames(_: P.LegendPosition_3) = [`HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED`, `BOTTOM_LEGEND`, `LEFT_LEGEND`, `RIGHT_LEGEND`, `TOP_LEGEND`, `NO_LEGEND`, `INSIDE_LEGEND`];
	string[3] enumMemberNames(_: P.StackedType_1) = [`WATERFALL_STACKED_TYPE_UNSPECIFIED`, `STACKED`, `SEQUENTIAL`];
	string[3] enumMemberNames(_: NumberFormatSource) = [`CHART_NUMBER_FORMAT_SOURCE_UNDEFINED`, `FROM_DATA`, `CUSTOM`];
	string[3] enumMemberNames(_: ComparisonType) = [`COMPARISON_TYPE_UNDEFINED`, `ABSOLUTE_DIFFERENCE`, `PERCENTAGE_DIFFERENCE`];
	string[2] enumMemberNames(_: RefreshScope) = [`DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED`, `ALL_DATA_SOURCES`];
	string[8] enumMemberNames(_: DaysOfWeek) = [`DAY_OF_WEEK_UNSPECIFIED`, `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`];
	string[7] enumMemberNames(_: PasteType) = [`PASTE_NORMAL`, `PASTE_VALUES`, `PASTE_FORMAT`, `PASTE_NO_BORDERS`, `PASTE_FORMULA`, `PASTE_DATA_VALIDATION`, `PASTE_CONDITIONAL_FORMATTING`];
	string[2] enumMemberNames(_: PasteOrientation) = [`NORMAL`, `TRANSPOSE`];
	string[3] enumMemberNames(_: MergeType) = [`MERGE_ALL`, `MERGE_COLUMNS`, `MERGE_ROWS`];
	string[7] enumMemberNames(_: DelimiterType) = [`DELIMITER_TYPE_UNSPECIFIED`, `COMMA`, `SEMICOLON`, `PERIOD`, `SPACE`, `CUSTOM`, `AUTODETECT`];
	string[2] enumMemberNames(_: InsertDataOption) = [`OVERWRITE`, `INSERT_ROWS`];
}

package void initForUrl(scope ref Buffer b) {
	b.clear();
	b ~= `https://sheets.googleapis.com/`;
}

void serializeAsUrl(scope ref Buffer b, scope ref const CommonParameters p, char s) {
	if (p._xgafv) {
		b ~= s;
		b ~= `$.xgafv=2`;
		s = '&';
	}
	if (p.alt) {
		b ~= s;
		b ~= `alt=`;
		b ~= enumMemberNames!(P.Alt)[p.alt];
		s = '&';
	}
	if (!p.prettyPrint) {
		b ~= s;
		b ~= `prettyPrint=false`;
		s = '&';
	}
	if (!p.accessToken.isNull) {
		b ~= s;
		b ~= `access_token=`;
		b.serializeAsUrl(p.accessToken.get);
		s = '&';
	}
	if (!p.callback.isNull) {
		b ~= s;
		b ~= `callback=`;
		b.serializeAsUrl(p.callback.get);
		s = '&';
	}
	if (!p.fields.isNull) {
		b ~= s;
		b ~= `fields=`;
		b.serializeAsUrl(p.fields.get);
		s = '&';
	}
	if (!p.key.isNull) {
		b ~= s;
		b ~= `key=`;
		b.serializeAsUrl(p.key.get);
		s = '&';
	}
	if (!p.oauthToken.isNull) {
		b ~= s;
		b ~= `oauth_token=`;
		b.serializeAsUrl(p.oauthToken.get);
		s = '&';
	}
	if (!p.quotaUser.isNull) {
		b ~= s;
		b ~= `quotaUser=`;
		b.serializeAsUrl(p.quotaUser.get);
		s = '&';
	}
	if (!p.uploadType.isNull) {
		b ~= s;
		b ~= `uploadType=`;
		b.serializeAsUrl(p.uploadType.get);
		s = '&';
	}
	if (!p.uploadProtocol.isNull) {
		b ~= s;
		b ~= `upload_protocol=`;
		b.serializeAsUrl(p.uploadProtocol.get);
		s = '&';
	}
}

bool serializeAsJson(scope ref Buffer b, scope ref const ValueRange v) => '{'
	.add!m(b, `"majorDimension":`, v.majorDimension)
	.add(b, `"range":`, v.range)
	.add(b, `"values":`, v.values)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ClearValuesRequest v) {
	b ~= `{}`;
	return false;
}

bool serializeAsJson(scope ref Buffer b, scope ref const BatchUpdateValuesRequest v) => '{'
	.add(b, `"includeValuesInResponse":`, v.includeValuesInResponse)
	.addB(b, `"responseDateTimeRenderOption":"FORMATTED_STRING"`, !!v.responseDateTimeRenderOption)
	.add!m(b, `"responseValueRenderOption":`, v.responseValueRenderOption)
	.add!m(b, `"valueInputOption":`, v.valueInputOption)
	.add!m(b, `"data":`, v.data)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BatchClearValuesRequest v) => '{'
	.add(b, `"ranges":`, v.ranges)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BatchGetValuesByDataFilterRequest v) => '{'
	.addB(b, `"dateTimeRenderOption":"FORMATTED_STRING"`, !!v.dateTimeRenderOption)
	.add!m(b, `"majorDimension":`, v.majorDimension)
	.add!m(b, `"valueRenderOption":`, v.valueRenderOption)
	.add!m(b, `"dataFilters":`, v.dataFilters)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataFilter v) => '{'
	.add!m(b, `"developerMetadataLookup":`, v.developerMetadataLookup)
	.add!m(b, `"gridRange":`, v.gridRange)
	.add(b, `"a1Range":`, v.a1Range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeveloperMetadataLookup v) => '{'
	.add!m(b, `"metadataLocation":`, v.metadataLocation)
	.add!m(b, `"locationMatchingStrategy":`, v.locationMatchingStrategy)
	.add!m(b, `"locationType":`, v.locationType)
	.add!m(b, `"visibility":`, v.visibility)
	.add(b, `"metadataId":`, v.metadataId)
	.add(b, `"metadataKey":`, v.metadataKey)
	.add(b, `"metadataValue":`, v.metadataValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeveloperMetadataLocation v) => '{'
	.add!m(b, `"dimensionRange":`, v.dimensionRange)
	.add!m(b, `"locationType":`, v.locationType)
	.add(b, `"spreadsheet":`, v.spreadsheet)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DimensionRange v) => '{'
	.add!m(b, `"dimension":`, v.dimension)
	.add(b, `"endIndex":`, v.endIndex)
	.add(b, `"sheetId":`, v.sheetId)
	.add(b, `"startIndex":`, v.startIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GridRange v) => '{'
	.add(b, `"endColumnIndex":`, v.endColumnIndex)
	.add(b, `"endRowIndex":`, v.endRowIndex)
	.add(b, `"sheetId":`, v.sheetId)
	.add(b, `"startColumnIndex":`, v.startColumnIndex)
	.add(b, `"startRowIndex":`, v.startRowIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BatchUpdateValuesByDataFilterRequest v) => '{'
	.add(b, `"includeValuesInResponse":`, v.includeValuesInResponse)
	.addB(b, `"responseDateTimeRenderOption":"FORMATTED_STRING"`, !!v.responseDateTimeRenderOption)
	.add!m(b, `"responseValueRenderOption":`, v.responseValueRenderOption)
	.add!m(b, `"valueInputOption":`, v.valueInputOption)
	.add!m(b, `"data":`, v.data)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataFilterValueRange v) => '{'
	.add!m(b, `"dataFilter":`, v.dataFilter)
	.add!m(b, `"majorDimension":`, v.majorDimension)
	.add(b, `"values":`, v.values)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BatchClearValuesByDataFilterRequest v) => '{'
	.add!m(b, `"dataFilters":`, v.dataFilters)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeveloperMetadata v) => '{'
	.add!m(b, `"location":`, v.location)
	.add!m(b, `"visibility":`, v.visibility)
	.add(b, `"metadataId":`, v.metadataId)
	.add(b, `"metadataKey":`, v.metadataKey)
	.add(b, `"metadataValue":`, v.metadataValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SearchDeveloperMetadataRequest v) => '{'
	.add!m(b, `"dataFilters":`, v.dataFilters)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Spreadsheet v) => '{'
	.add!m(b, `"properties":`, v.properties)
	.add!m(b, `"dataSourceSchedules":`, v.dataSourceSchedules)
	.add!m(b, `"dataSources":`, v.dataSources)
	.add!m(b, `"developerMetadata":`, v.developerMetadata)
	.add!m(b, `"namedRanges":`, v.namedRanges)
	.add!m(b, `"sheets":`, v.sheets)
	.add(b, `"spreadsheetId":`, v.spreadsheetId)
	.add(b, `"spreadsheetUrl":`, v.spreadsheetUrl)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SpreadsheetProperties v) => '{'
	.add!m(b, `"defaultFormat":`, v.defaultFormat)
	.add!m(b, `"iterativeCalculationSettings":`, v.iterativeCalculationSettings)
	.add!m(b, `"spreadsheetTheme":`, v.spreadsheetTheme)
	.add!m(b, `"autoRecalc":`, v.autoRecalc)
	.add(b, `"locale":`, v.locale)
	.add(b, `"timeZone":`, v.timeZone)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CellFormat v) => '{'
	.add!m(b, `"backgroundColor":`, v.backgroundColor)
	.add!m(b, `"backgroundColorStyle":`, v.backgroundColorStyle)
	.add!m(b, `"borders":`, v.borders)
	.add!m(b, `"numberFormat":`, v.numberFormat)
	.add!m(b, `"padding":`, v.padding)
	.add!m(b, `"textFormat":`, v.textFormat)
	.add!m(b, `"textRotation":`, v.textRotation)
	.add!m(b, `"horizontalAlignment":`, v.horizontalAlignment)
	.add!m(b, `"hyperlinkDisplayType":`, v.hyperlinkDisplayType)
	.add!m(b, `"textDirection":`, v.textDirection)
	.add!m(b, `"verticalAlignment":`, v.verticalAlignment)
	.add!m(b, `"wrapStrategy":`, v.wrapStrategy)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const NumberFormat v) => '{'
	.add!m(b, `"type":`, v.type)
	.add(b, `"pattern":`, v.pattern)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Color v) => '{'
	.add(b, `"alpha":`, v.alpha)
	.add(b, `"blue":`, v.blue)
	.add(b, `"green":`, v.green)
	.add(b, `"red":`, v.red)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ColorStyle v) => '{'
	.add!m(b, `"rgbColor":`, v.rgbColor)
	.add!m(b, `"themeColor":`, v.themeColor)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Borders v) => '{'
	.add!m(b, `"bottom":`, v.bottom)
	.add!m(b, `"left":`, v.left)
	.add!m(b, `"right":`, v.right)
	.add!m(b, `"top":`, v.top)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Border v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.add!m(b, `"style":`, v.style)
	.add(b, `"width":`, v.width)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Padding v) => '{'
	.add(b, `"bottom":`, v.bottom)
	.add(b, `"left":`, v.left)
	.add(b, `"right":`, v.right)
	.add(b, `"top":`, v.top)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TextFormat v) => '{'
	.add!m(b, `"foregroundColor":`, v.foregroundColor)
	.add!m(b, `"foregroundColorStyle":`, v.foregroundColorStyle)
	.add!m(b, `"link":`, v.link)
	.add(b, `"bold":`, v.bold)
	.add(b, `"italic":`, v.italic)
	.add(b, `"strikethrough":`, v.strikethrough)
	.add(b, `"underline":`, v.underline)
	.add(b, `"fontFamily":`, v.fontFamily)
	.add(b, `"fontSize":`, v.fontSize)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Link v) => '{'
	.add(b, `"uri":`, v.uri)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TextRotation v) => '{'
	.add(b, `"vertical":`, v.vertical)
	.add(b, `"angle":`, v.angle)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const IterativeCalculationSettings v) => '{'
	.add(b, `"convergenceThreshold":`, v.convergenceThreshold)
	.add(b, `"maxIterations":`, v.maxIterations)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SpreadsheetTheme v) => '{'
	.add(b, `"primaryFontFamily":`, v.primaryFontFamily)
	.add!m(b, `"themeColors":`, v.themeColors)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ThemeColorPair v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorType":`, v.colorType)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Sheet v) => '{'
	.add!m(b, `"basicFilter":`, v.basicFilter)
	.add!m(b, `"properties":`, v.properties)
	.add!m(b, `"bandedRanges":`, v.bandedRanges)
	.add!m(b, `"charts":`, v.charts)
	.add!m(b, `"columnGroups":`, v.columnGroups)
	.add!m(b, `"conditionalFormats":`, v.conditionalFormats)
	.add!m(b, `"data":`, v.data)
	.add!m(b, `"developerMetadata":`, v.developerMetadata)
	.add!m(b, `"filterViews":`, v.filterViews)
	.add!m(b, `"merges":`, v.merges)
	.add!m(b, `"protectedRanges":`, v.protectedRanges)
	.add!m(b, `"rowGroups":`, v.rowGroups)
	.add!m(b, `"slicers":`, v.slicers)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SheetProperties v) => '{'
	.add!m(b, `"dataSourceSheetProperties":`, v.dataSourceSheetProperties)
	.add!m(b, `"gridProperties":`, v.gridProperties)
	.add!m(b, `"tabColor":`, v.tabColor)
	.add!m(b, `"tabColorStyle":`, v.tabColorStyle)
	.add(b, `"hidden":`, v.hidden)
	.add(b, `"rightToLeft":`, v.rightToLeft)
	.add!m(b, `"sheetType":`, v.sheetType)
	.add(b, `"index":`, v.index)
	.add(b, `"sheetId":`, v.sheetId)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GridProperties v) => '{'
	.add(b, `"columnGroupControlAfter":`, v.columnGroupControlAfter)
	.add(b, `"hideGridlines":`, v.hideGridlines)
	.add(b, `"rowGroupControlAfter":`, v.rowGroupControlAfter)
	.add(b, `"columnCount":`, v.columnCount)
	.add(b, `"frozenColumnCount":`, v.frozenColumnCount)
	.add(b, `"frozenRowCount":`, v.frozenRowCount)
	.add(b, `"rowCount":`, v.rowCount)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceSheetProperties v) => '{'
	.add!m(b, `"dataExecutionStatus":`, v.dataExecutionStatus)
	.add!m(b, `"columns":`, v.columns)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceColumn v) => '{'
	.add!m(b, `"reference":`, v.reference)
	.add(b, `"formula":`, v.formula)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceColumnReference v) => '{'
	.add(b, `"name":`, v.name)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataExecutionStatus v) => '{'
	.add!m(b, `"errorCode":`, v.errorCode)
	.add!m(b, `"state":`, v.state)
	.add(b, `"errorMessage":`, v.errorMessage)
	.add(b, `"lastRefreshTime":`, v.lastRefreshTime)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GridData v) => '{'
	.add!m(b, `"columnMetadata":`, v.columnMetadata)
	.add!m(b, `"rowData":`, v.rowData)
	.add!m(b, `"rowMetadata":`, v.rowMetadata)
	.add(b, `"startColumn":`, v.startColumn)
	.add(b, `"startRow":`, v.startRow)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const RowData v) => '{'
	.add!m(b, `"values":`, v.values)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CellData v) => '{'
	.add!m(b, `"dataSourceFormula":`, v.dataSourceFormula)
	.add!m(b, `"dataSourceTable":`, v.dataSourceTable)
	.add!m(b, `"dataValidation":`, v.dataValidation)
	.add!m(b, `"effectiveFormat":`, v.effectiveFormat)
	.add!m(b, `"effectiveValue":`, v.effectiveValue)
	.add!m(b, `"pivotTable":`, v.pivotTable)
	.add!m(b, `"userEnteredFormat":`, v.userEnteredFormat)
	.add!m(b, `"userEnteredValue":`, v.userEnteredValue)
	.add(b, `"formattedValue":`, v.formattedValue)
	.add(b, `"hyperlink":`, v.hyperlink)
	.add(b, `"note":`, v.note)
	.add!m(b, `"textFormatRuns":`, v.textFormatRuns)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ExtendedValue v) => '{'
	.add!m(b, `"errorValue":`, v.errorValue)
	.add(b, `"boolValue":`, v.boolValue)
	.add(b, `"formulaValue":`, v.formulaValue)
	.add(b, `"numberValue":`, v.numberValue)
	.add(b, `"stringValue":`, v.stringValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ErrorValue v) => '{'
	.add!m(b, `"type":`, v.type)
	.add(b, `"message":`, v.message)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TextFormatRun v) => '{'
	.add!m(b, `"format":`, v.format)
	.add(b, `"startIndex":`, v.startIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataValidationRule v) => '{'
	.add!m(b, `"condition":`, v.condition)
	.add(b, `"showCustomUi":`, v.showCustomUi)
	.add(b, `"strict":`, v.strict)
	.add(b, `"inputMessage":`, v.inputMessage)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BooleanCondition v) => '{'
	.add!m(b, `"type":`, v.type)
	.add!m(b, `"values":`, v.values)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ConditionValue v) => '{'
	.add!m(b, `"relativeDate":`, v.relativeDate)
	.add(b, `"userEnteredValue":`, v.userEnteredValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotTable v) => '{'
	.add!m(b, `"dataExecutionStatus":`, v.dataExecutionStatus)
	.add!m(b, `"source":`, v.source)
	.addB(b, `"valueLayout":"VERTICAL"`, !!v.valueLayout)
	.add!m(b, `"columns":`, v.columns)
	.add!m(b, `"criteria":`, v.criteria)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.add!m(b, `"filterSpecs":`, v.filterSpecs)
	.add!m(b, `"rows":`, v.rows)
	.add!m(b, `"values":`, v.values)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotGroup v) => '{'
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add!m(b, `"groupLimit":`, v.groupLimit)
	.add!m(b, `"groupRule":`, v.groupRule)
	.add!m(b, `"valueBucket":`, v.valueBucket)
	.add(b, `"repeatHeadings":`, v.repeatHeadings)
	.add(b, `"showTotals":`, v.showTotals)
	.add!m(b, `"sortOrder":`, v.sortOrder)
	.add(b, `"label":`, v.label)
	.add(b, `"sourceColumnOffset":`, v.sourceColumnOffset)
	.add!m(b, `"valueMetadata":`, v.valueMetadata)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotGroupValueMetadata v) => '{'
	.add!m(b, `"value":`, v.value)
	.add(b, `"collapsed":`, v.collapsed)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotGroupSortValueBucket v) => '{'
	.add!m(b, `"buckets":`, v.buckets)
	.add(b, `"valuesIndex":`, v.valuesIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotGroupRule v) => '{'
	.add!m(b, `"dateTimeRule":`, v.dateTimeRule)
	.add!m(b, `"histogramRule":`, v.histogramRule)
	.add!m(b, `"manualRule":`, v.manualRule)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ManualRule v) => '{'
	.add!m(b, `"groups":`, v.groups)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ManualRuleGroup v) => '{'
	.add!m(b, `"groupName":`, v.groupName)
	.add!m(b, `"items":`, v.items)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const HistogramRule v) => '{'
	.add(b, `"end":`, v.end)
	.add(b, `"interval":`, v.interval)
	.add(b, `"start":`, v.start)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DateTimeRule v) => '{'
	.add!m(b, `"type":`, v.type)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotGroupLimit v) => '{'
	.add(b, `"applyOrder":`, v.applyOrder)
	.add(b, `"countLimit":`, v.countLimit)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotFilterCriteria v) => '{'
	.add!m(b, `"condition":`, v.condition)
	.add(b, `"visibleByDefault":`, v.visibleByDefault)
	.add(b, `"visibleValues":`, v.visibleValues)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotFilterSpec v) => '{'
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add!m(b, `"filterCriteria":`, v.filterCriteria)
	.add(b, `"columnOffsetIndex":`, v.columnOffsetIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PivotValue v) => '{'
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add!m(b, `"calculatedDisplayType":`, v.calculatedDisplayType)
	.add!m(b, `"summarizeFunction":`, v.summarizeFunction)
	.add(b, `"formula":`, v.formula)
	.add(b, `"name":`, v.name)
	.add(b, `"sourceColumnOffset":`, v.sourceColumnOffset)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceTable v) => '{'
	.add!m(b, `"dataExecutionStatus":`, v.dataExecutionStatus)
	.add!m(b, `"columnSelectionType":`, v.columnSelectionType)
	.add!m(b, `"columns":`, v.columns)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.add!m(b, `"filterSpecs":`, v.filterSpecs)
	.add(b, `"rowLimit":`, v.rowLimit)
	.add!m(b, `"sortSpecs":`, v.sortSpecs)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const FilterSpec v) => '{'
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add!m(b, `"filterCriteria":`, v.filterCriteria)
	.add(b, `"columnIndex":`, v.columnIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const FilterCriteria v) => '{'
	.add!m(b, `"condition":`, v.condition)
	.add!m(b, `"visibleBackgroundColor":`, v.visibleBackgroundColor)
	.add!m(b, `"visibleBackgroundColorStyle":`, v.visibleBackgroundColorStyle)
	.add!m(b, `"visibleForegroundColor":`, v.visibleForegroundColor)
	.add!m(b, `"visibleForegroundColorStyle":`, v.visibleForegroundColorStyle)
	.add(b, `"hiddenValues":`, v.hiddenValues)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SortSpec v) => '{'
	.add!m(b, `"backgroundColor":`, v.backgroundColor)
	.add!m(b, `"backgroundColorStyle":`, v.backgroundColorStyle)
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add!m(b, `"foregroundColor":`, v.foregroundColor)
	.add!m(b, `"foregroundColorStyle":`, v.foregroundColorStyle)
	.add!m(b, `"sortOrder":`, v.sortOrder)
	.add(b, `"dimensionIndex":`, v.dimensionIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceFormula v) => '{'
	.add!m(b, `"dataExecutionStatus":`, v.dataExecutionStatus)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DimensionProperties v) => '{'
	.add!m(b, `"dataSourceColumnReference":`, v.dataSourceColumnReference)
	.add(b, `"hiddenByFilter":`, v.hiddenByFilter)
	.add(b, `"hiddenByUser":`, v.hiddenByUser)
	.add!m(b, `"developerMetadata":`, v.developerMetadata)
	.add(b, `"pixelSize":`, v.pixelSize)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ConditionalFormatRule v) => '{'
	.add!m(b, `"booleanRule":`, v.booleanRule)
	.add!m(b, `"gradientRule":`, v.gradientRule)
	.add!m(b, `"ranges":`, v.ranges)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BooleanRule v) => '{'
	.add!m(b, `"condition":`, v.condition)
	.add!m(b, `"format":`, v.format)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GradientRule v) => '{'
	.add!m(b, `"maxpoint":`, v.maxpoint)
	.add!m(b, `"midpoint":`, v.midpoint)
	.add!m(b, `"minpoint":`, v.minpoint)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const InterpolationPoint v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.add!m(b, `"type":`, v.type)
	.add(b, `"value":`, v.value)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const FilterView v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"criteria":`, v.criteria)
	.add!m(b, `"filterSpecs":`, v.filterSpecs)
	.add(b, `"filterViewId":`, v.filterViewId)
	.add(b, `"namedRangeId":`, v.namedRangeId)
	.add!m(b, `"sortSpecs":`, v.sortSpecs)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ProtectedRange v) => '{'
	.add!m(b, `"editors":`, v.editors)
	.add!m(b, `"range":`, v.range)
	.add(b, `"requestingUserCanEdit":`, v.requestingUserCanEdit)
	.add(b, `"warningOnly":`, v.warningOnly)
	.add(b, `"description":`, v.description)
	.add(b, `"namedRangeId":`, v.namedRangeId)
	.add(b, `"protectedRangeId":`, v.protectedRangeId)
	.add!m(b, `"unprotectedRanges":`, v.unprotectedRanges)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Editors v) => '{'
	.add(b, `"domainUsersCanEdit":`, v.domainUsersCanEdit)
	.add(b, `"groups":`, v.groups)
	.add(b, `"users":`, v.users)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicFilter v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"criteria":`, v.criteria)
	.add!m(b, `"filterSpecs":`, v.filterSpecs)
	.add!m(b, `"sortSpecs":`, v.sortSpecs)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const EmbeddedChart v) => '{'
	.add!m(b, `"border":`, v.border)
	.add!m(b, `"position":`, v.position)
	.add!m(b, `"spec":`, v.spec)
	.add(b, `"chartId":`, v.chartId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartSpec v) => '{'
	.add!m(b, `"backgroundColor":`, v.backgroundColor)
	.add!m(b, `"backgroundColorStyle":`, v.backgroundColorStyle)
	.add!m(b, `"basicChart":`, v.basicChart)
	.add!m(b, `"bubbleChart":`, v.bubbleChart)
	.add!m(b, `"candlestickChart":`, v.candlestickChart)
	.add!m(b, `"dataSourceChartProperties":`, v.dataSourceChartProperties)
	.add!m(b, `"histogramChart":`, v.histogramChart)
	.add!m(b, `"orgChart":`, v.orgChart)
	.add!m(b, `"pieChart":`, v.pieChart)
	.add!m(b, `"scorecardChart":`, v.scorecardChart)
	.add!m(b, `"subtitleTextFormat":`, v.subtitleTextFormat)
	.add!m(b, `"subtitleTextPosition":`, v.subtitleTextPosition)
	.add!m(b, `"titleTextFormat":`, v.titleTextFormat)
	.add!m(b, `"titleTextPosition":`, v.titleTextPosition)
	.add!m(b, `"treemapChart":`, v.treemapChart)
	.add!m(b, `"waterfallChart":`, v.waterfallChart)
	.add!m(b, `"hiddenDimensionStrategy":`, v.hiddenDimensionStrategy)
	.add(b, `"maximized":`, v.maximized)
	.add(b, `"altText":`, v.altText)
	.add!m(b, `"filterSpecs":`, v.filterSpecs)
	.add(b, `"fontName":`, v.fontName)
	.add!m(b, `"sortSpecs":`, v.sortSpecs)
	.add(b, `"subtitle":`, v.subtitle)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TextPosition v) => '{'
	.add!m(b, `"horizontalAlignment":`, v.horizontalAlignment)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceChartProperties v) => '{'
	.add!m(b, `"dataExecutionStatus":`, v.dataExecutionStatus)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicChartSpec v) => '{'
	.add!m(b, `"totalDataLabel":`, v.totalDataLabel)
	.add!m(b, `"chartType":`, v.chartType)
	.add!m(b, `"compareMode":`, v.compareMode)
	.add(b, `"interpolateNulls":`, v.interpolateNulls)
	.add!m(b, `"legendPosition":`, v.legendPosition)
	.add(b, `"lineSmoothing":`, v.lineSmoothing)
	.add!m(b, `"stackedType":`, v.stackedType)
	.add(b, `"threeDimensional":`, v.threeDimensional)
	.add!m(b, `"axis":`, v.axis)
	.add!m(b, `"domains":`, v.domains)
	.add(b, `"headerCount":`, v.headerCount)
	.add!m(b, `"series":`, v.series)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicChartAxis v) => '{'
	.add!m(b, `"format":`, v.format)
	.add!m(b, `"titleTextPosition":`, v.titleTextPosition)
	.add!m(b, `"viewWindowOptions":`, v.viewWindowOptions)
	.add!m(b, `"position":`, v.position)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartAxisViewWindowOptions v) => '{'
	.add!m(b, `"viewWindowMode":`, v.viewWindowMode)
	.add(b, `"viewWindowMax":`, v.viewWindowMax)
	.add(b, `"viewWindowMin":`, v.viewWindowMin)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicChartDomain v) => '{'
	.add!m(b, `"domain":`, v.domain)
	.add(b, `"reversed":`, v.reversed)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartData v) => '{'
	.add!m(b, `"columnReference":`, v.columnReference)
	.add!m(b, `"groupRule":`, v.groupRule)
	.add!m(b, `"sourceRange":`, v.sourceRange)
	.add!m(b, `"aggregateType":`, v.aggregateType)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartSourceRange v) => '{'
	.add!m(b, `"sources":`, v.sources)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartGroupRule v) => '{'
	.add!m(b, `"dateTimeRule":`, v.dateTimeRule)
	.add!m(b, `"histogramRule":`, v.histogramRule)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartDateTimeRule v) => '{'
	.add!m(b, `"type":`, v.type)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartHistogramRule v) => '{'
	.add(b, `"intervalSize":`, v.intervalSize)
	.add(b, `"maxValue":`, v.maxValue)
	.add(b, `"minValue":`, v.minValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicChartSeries v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.add!m(b, `"dataLabel":`, v.dataLabel)
	.add!m(b, `"lineStyle":`, v.lineStyle)
	.add!m(b, `"pointStyle":`, v.pointStyle)
	.add!m(b, `"series":`, v.series)
	.add!m(b, `"targetAxis":`, v.targetAxis)
	.add!m(b, `"type":`, v.type)
	.add!m(b, `"styleOverrides":`, v.styleOverrides)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const LineStyle v) => '{'
	.add!m(b, `"type":`, v.type)
	.add(b, `"width":`, v.width)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataLabel v) => '{'
	.add!m(b, `"customLabelData":`, v.customLabelData)
	.add!m(b, `"textFormat":`, v.textFormat)
	.add!m(b, `"placement":`, v.placement)
	.add!m(b, `"type":`, v.type)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PointStyle v) => '{'
	.add!m(b, `"shape":`, v.shape)
	.add(b, `"size":`, v.size)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BasicSeriesDataPointStyleOverride v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.add!m(b, `"pointStyle":`, v.pointStyle)
	.add(b, `"index":`, v.index)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PieChartSpec v) => '{'
	.add!m(b, `"domain":`, v.domain)
	.add!m(b, `"series":`, v.series)
	.add!m(b, `"legendPosition":`, v.legendPosition)
	.add(b, `"threeDimensional":`, v.threeDimensional)
	.add(b, `"pieHole":`, v.pieHole)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BubbleChartSpec v) => '{'
	.add!m(b, `"bubbleBorderColor":`, v.bubbleBorderColor)
	.add!m(b, `"bubbleBorderColorStyle":`, v.bubbleBorderColorStyle)
	.add!m(b, `"bubbleLabels":`, v.bubbleLabels)
	.add!m(b, `"bubbleSizes":`, v.bubbleSizes)
	.add!m(b, `"bubbleTextStyle":`, v.bubbleTextStyle)
	.add!m(b, `"domain":`, v.domain)
	.add!m(b, `"groupIds":`, v.groupIds)
	.add!m(b, `"series":`, v.series)
	.add!m(b, `"legendPosition":`, v.legendPosition)
	.add(b, `"bubbleOpacity":`, v.bubbleOpacity)
	.add(b, `"bubbleMaxRadiusSize":`, v.bubbleMaxRadiusSize)
	.add(b, `"bubbleMinRadiusSize":`, v.bubbleMinRadiusSize)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CandlestickChartSpec v) => '{'
	.add!m(b, `"domain":`, v.domain)
	.add!m(b, `"data":`, v.data)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CandlestickDomain v) => '{'
	.add!m(b, `"data":`, v.data)
	.add(b, `"reversed":`, v.reversed)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CandlestickData v) => '{'
	.add!m(b, `"closeSeries":`, v.closeSeries)
	.add!m(b, `"highSeries":`, v.highSeries)
	.add!m(b, `"lowSeries":`, v.lowSeries)
	.add!m(b, `"openSeries":`, v.openSeries)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CandlestickSeries v) => '{'
	.add!m(b, `"data":`, v.data)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const OrgChartSpec v) => '{'
	.add!m(b, `"labels":`, v.labels)
	.add!m(b, `"nodeColor":`, v.nodeColor)
	.add!m(b, `"nodeColorStyle":`, v.nodeColorStyle)
	.add!m(b, `"parentLabels":`, v.parentLabels)
	.add!m(b, `"selectedNodeColor":`, v.selectedNodeColor)
	.add!m(b, `"selectedNodeColorStyle":`, v.selectedNodeColorStyle)
	.add!m(b, `"tooltips":`, v.tooltips)
	.add!m(b, `"nodeSize":`, v.nodeSize)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const HistogramChartSpec v) => '{'
	.add!m(b, `"legendPosition":`, v.legendPosition)
	.add(b, `"showItemDividers":`, v.showItemDividers)
	.add(b, `"bucketSize":`, v.bucketSize)
	.add(b, `"outlierPercentile":`, v.outlierPercentile)
	.add!m(b, `"series":`, v.series)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const HistogramSeries v) => '{'
	.add!m(b, `"barColor":`, v.barColor)
	.add!m(b, `"barColorStyle":`, v.barColorStyle)
	.add!m(b, `"data":`, v.data)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const WaterfallChartSpec v) => '{'
	.add!m(b, `"connectorLineStyle":`, v.connectorLineStyle)
	.add!m(b, `"domain":`, v.domain)
	.add!m(b, `"totalDataLabel":`, v.totalDataLabel)
	.add(b, `"firstValueIsTotal":`, v.firstValueIsTotal)
	.add(b, `"hideConnectorLines":`, v.hideConnectorLines)
	.add!m(b, `"stackedType":`, v.stackedType)
	.add!m(b, `"series":`, v.series)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const WaterfallChartDomain v) => '{'
	.add!m(b, `"data":`, v.data)
	.add(b, `"reversed":`, v.reversed)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const WaterfallChartSeries v) => '{'
	.add!m(b, `"data":`, v.data)
	.add!m(b, `"dataLabel":`, v.dataLabel)
	.add!m(b, `"negativeColumnsStyle":`, v.negativeColumnsStyle)
	.add!m(b, `"positiveColumnsStyle":`, v.positiveColumnsStyle)
	.add!m(b, `"subtotalColumnsStyle":`, v.subtotalColumnsStyle)
	.add(b, `"hideTrailingSubtotal":`, v.hideTrailingSubtotal)
	.add!m(b, `"customSubtotals":`, v.customSubtotals)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const WaterfallChartColumnStyle v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.add(b, `"label":`, v.label)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const WaterfallChartCustomSubtotal v) => '{'
	.add(b, `"dataIsSubtotal":`, v.dataIsSubtotal)
	.add(b, `"label":`, v.label)
	.add(b, `"subtotalIndex":`, v.subtotalIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TreemapChartSpec v) => '{'
	.add!m(b, `"colorData":`, v.colorData)
	.add!m(b, `"colorScale":`, v.colorScale)
	.add!m(b, `"headerColor":`, v.headerColor)
	.add!m(b, `"headerColorStyle":`, v.headerColorStyle)
	.add!m(b, `"labels":`, v.labels)
	.add!m(b, `"parentLabels":`, v.parentLabels)
	.add!m(b, `"sizeData":`, v.sizeData)
	.add!m(b, `"textFormat":`, v.textFormat)
	.add(b, `"hideTooltips":`, v.hideTooltips)
	.add(b, `"hintedLevels":`, v.hintedLevels)
	.add(b, `"levels":`, v.levels)
	.add(b, `"maxValue":`, v.maxValue)
	.add(b, `"minValue":`, v.minValue)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TreemapChartColorScale v) => '{'
	.add!m(b, `"maxValueColor":`, v.maxValueColor)
	.add!m(b, `"maxValueColorStyle":`, v.maxValueColorStyle)
	.add!m(b, `"midValueColor":`, v.midValueColor)
	.add!m(b, `"midValueColorStyle":`, v.midValueColorStyle)
	.add!m(b, `"minValueColor":`, v.minValueColor)
	.add!m(b, `"minValueColorStyle":`, v.minValueColorStyle)
	.add!m(b, `"noDataColor":`, v.noDataColor)
	.add!m(b, `"noDataColorStyle":`, v.noDataColorStyle)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ScorecardChartSpec v) => '{'
	.add!m(b, `"baselineValueData":`, v.baselineValueData)
	.add!m(b, `"baselineValueFormat":`, v.baselineValueFormat)
	.add!m(b, `"customFormatOptions":`, v.customFormatOptions)
	.add!m(b, `"keyValueData":`, v.keyValueData)
	.add!m(b, `"keyValueFormat":`, v.keyValueFormat)
	.add!m(b, `"aggregateType":`, v.aggregateType)
	.add!m(b, `"numberFormatSource":`, v.numberFormatSource)
	.add(b, `"scaleFactor":`, v.scaleFactor)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const KeyValueFormat v) => '{'
	.add!m(b, `"position":`, v.position)
	.add!m(b, `"textFormat":`, v.textFormat)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BaselineValueFormat v) => '{'
	.add!m(b, `"negativeColor":`, v.negativeColor)
	.add!m(b, `"negativeColorStyle":`, v.negativeColorStyle)
	.add!m(b, `"position":`, v.position)
	.add!m(b, `"positiveColor":`, v.positiveColor)
	.add!m(b, `"positiveColorStyle":`, v.positiveColorStyle)
	.add!m(b, `"textFormat":`, v.textFormat)
	.add!m(b, `"comparisonType":`, v.comparisonType)
	.add(b, `"description":`, v.description)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ChartCustomNumberFormatOptions v) => '{'
	.add(b, `"prefix":`, v.prefix)
	.add(b, `"suffix":`, v.suffix)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const EmbeddedObjectPosition v) => '{'
	.add!m(b, `"overlayPosition":`, v.overlayPosition)
	.add(b, `"newSheet":`, v.newSheet)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const OverlayPosition v) => '{'
	.add!m(b, `"anchorCell":`, v.anchorCell)
	.add(b, `"heightPixels":`, v.heightPixels)
	.add(b, `"offsetXPixels":`, v.offsetXPixels)
	.add(b, `"offsetYPixels":`, v.offsetYPixels)
	.add(b, `"widthPixels":`, v.widthPixels)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GridCoordinate v) => '{'
	.add(b, `"columnIndex":`, v.columnIndex)
	.add(b, `"rowIndex":`, v.rowIndex)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const EmbeddedObjectBorder v) => '{'
	.add!m(b, `"color":`, v.color)
	.add!m(b, `"colorStyle":`, v.colorStyle)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BandedRange v) => '{'
	.add!m(b, `"columnProperties":`, v.columnProperties)
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"rowProperties":`, v.rowProperties)
	.add(b, `"bandedRangeId":`, v.bandedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BandingProperties v) => '{'
	.add!m(b, `"firstBandColor":`, v.firstBandColor)
	.add!m(b, `"firstBandColorStyle":`, v.firstBandColorStyle)
	.add!m(b, `"footerColor":`, v.footerColor)
	.add!m(b, `"footerColorStyle":`, v.footerColorStyle)
	.add!m(b, `"headerColor":`, v.headerColor)
	.add!m(b, `"headerColorStyle":`, v.headerColorStyle)
	.add!m(b, `"secondBandColor":`, v.secondBandColor)
	.add!m(b, `"secondBandColorStyle":`, v.secondBandColorStyle)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DimensionGroup v) => '{'
	.add!m(b, `"range":`, v.range)
	.add(b, `"collapsed":`, v.collapsed)
	.add(b, `"depth":`, v.depth)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Slicer v) => '{'
	.add!m(b, `"position":`, v.position)
	.add!m(b, `"spec":`, v.spec)
	.add(b, `"slicerId":`, v.slicerId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SlicerSpec v) => '{'
	.add!m(b, `"backgroundColor":`, v.backgroundColor)
	.add!m(b, `"backgroundColorStyle":`, v.backgroundColorStyle)
	.add!m(b, `"dataRange":`, v.dataRange)
	.add!m(b, `"filterCriteria":`, v.filterCriteria)
	.add!m(b, `"textFormat":`, v.textFormat)
	.add(b, `"applyToPivotTables":`, v.applyToPivotTables)
	.add!m(b, `"horizontalAlignment":`, v.horizontalAlignment)
	.add(b, `"columnIndex":`, v.columnIndex)
	.add(b, `"title":`, v.title)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const NamedRange v) => '{'
	.add!m(b, `"range":`, v.range)
	.add(b, `"name":`, v.name)
	.add(b, `"namedRangeId":`, v.namedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSource v) => '{'
	.add!m(b, `"spec":`, v.spec)
	.add!m(b, `"calculatedColumns":`, v.calculatedColumns)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceSpec v) => '{'
	.add!m(b, `"bigQuery":`, v.bigQuery)
	.add!m(b, `"parameters":`, v.parameters)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BigQueryDataSourceSpec v) => '{'
	.add!m(b, `"querySpec":`, v.querySpec)
	.add!m(b, `"tableSpec":`, v.tableSpec)
	.add(b, `"projectId":`, v.projectId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BigQueryQuerySpec v) => '{'
	.add(b, `"rawQuery":`, v.rawQuery)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BigQueryTableSpec v) => '{'
	.add(b, `"datasetId":`, v.datasetId)
	.add(b, `"tableId":`, v.tableId)
	.add(b, `"tableProjectId":`, v.tableProjectId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceParameter v) => '{'
	.add!m(b, `"range":`, v.range)
	.add(b, `"name":`, v.name)
	.add(b, `"namedRangeId":`, v.namedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceRefreshSchedule v) => '{'
	.add!m(b, `"dailySchedule":`, v.dailySchedule)
	.add!m(b, `"monthlySchedule":`, v.monthlySchedule)
	.add!m(b, `"nextRun":`, v.nextRun)
	.add!m(b, `"weeklySchedule":`, v.weeklySchedule)
	.add(b, `"enabled":`, v.enabled)
	.addB(b, `"refreshScope":"ALL_DATA_SOURCES"`, !!v.refreshScope)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceRefreshDailySchedule v) => '{'
	.add!m(b, `"startTime":`, v.startTime)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TimeOfDay v) => '{'
	.add(b, `"hours":`, v.hours)
	.add(b, `"minutes":`, v.minutes)
	.add(b, `"nanos":`, v.nanos)
	.add(b, `"seconds":`, v.seconds)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceRefreshWeeklySchedule v) => '{'
	.add!m(b, `"startTime":`, v.startTime)
	.add!m(b, `"daysOfWeek":`, v.daysOfWeek)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceRefreshMonthlySchedule v) => '{'
	.add!m(b, `"startTime":`, v.startTime)
	.add(b, `"daysOfMonth":`, v.daysOfMonth)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Interval v) => '{'
	.add(b, `"endTime":`, v.endTime)
	.add(b, `"startTime":`, v.startTime)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const GetSpreadsheetByDataFilterRequest v) => '{'
	.add(b, `"includeGridData":`, v.includeGridData)
	.add!m(b, `"dataFilters":`, v.dataFilters)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const BatchUpdateSpreadsheetRequest v) => '{'
	.add(b, `"includeSpreadsheetInResponse":`, v.includeSpreadsheetInResponse)
	.add(b, `"responseIncludeGridData":`, v.responseIncludeGridData)
	.add!m(b, `"requests":`, v.requests)
	.add(b, `"responseRanges":`, v.responseRanges)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const Request v) => '{'
	.add!m(b, `"addBanding":`, v.addBanding)
	.add!m(b, `"addChart":`, v.addChart)
	.add!m(b, `"addConditionalFormatRule":`, v.addConditionalFormatRule)
	.add!m(b, `"addDataSource":`, v.addDataSource)
	.add!m(b, `"addDimensionGroup":`, v.addDimensionGroup)
	.add!m(b, `"addFilterView":`, v.addFilterView)
	.add!m(b, `"addNamedRange":`, v.addNamedRange)
	.add!m(b, `"addProtectedRange":`, v.addProtectedRange)
	.add!m(b, `"addSheet":`, v.addSheet)
	.add!m(b, `"addSlicer":`, v.addSlicer)
	.add!m(b, `"appendCells":`, v.appendCells)
	.add!m(b, `"appendDimension":`, v.appendDimension)
	.add!m(b, `"autoFill":`, v.autoFill)
	.add!m(b, `"autoResizeDimensions":`, v.autoResizeDimensions)
	.add!m(b, `"clearBasicFilter":`, v.clearBasicFilter)
	.add!m(b, `"copyPaste":`, v.copyPaste)
	.add!m(b, `"createDeveloperMetadata":`, v.createDeveloperMetadata)
	.add!m(b, `"cutPaste":`, v.cutPaste)
	.add!m(b, `"deleteBanding":`, v.deleteBanding)
	.add!m(b, `"deleteConditionalFormatRule":`, v.deleteConditionalFormatRule)
	.add!m(b, `"deleteDataSource":`, v.deleteDataSource)
	.add!m(b, `"deleteDeveloperMetadata":`, v.deleteDeveloperMetadata)
	.add!m(b, `"deleteDimension":`, v.deleteDimension)
	.add!m(b, `"deleteDimensionGroup":`, v.deleteDimensionGroup)
	.add!m(b, `"deleteDuplicates":`, v.deleteDuplicates)
	.add!m(b, `"deleteEmbeddedObject":`, v.deleteEmbeddedObject)
	.add!m(b, `"deleteFilterView":`, v.deleteFilterView)
	.add!m(b, `"deleteNamedRange":`, v.deleteNamedRange)
	.add!m(b, `"deleteProtectedRange":`, v.deleteProtectedRange)
	.add!m(b, `"deleteRange":`, v.deleteRange)
	.add!m(b, `"deleteSheet":`, v.deleteSheet)
	.add!m(b, `"duplicateFilterView":`, v.duplicateFilterView)
	.add!m(b, `"duplicateSheet":`, v.duplicateSheet)
	.add!m(b, `"findReplace":`, v.findReplace)
	.add!m(b, `"insertDimension":`, v.insertDimension)
	.add!m(b, `"insertRange":`, v.insertRange)
	.add!m(b, `"mergeCells":`, v.mergeCells)
	.add!m(b, `"moveDimension":`, v.moveDimension)
	.add!m(b, `"pasteData":`, v.pasteData)
	.add!m(b, `"randomizeRange":`, v.randomizeRange)
	.add!m(b, `"refreshDataSource":`, v.refreshDataSource)
	.add!m(b, `"repeatCell":`, v.repeatCell)
	.add!m(b, `"setBasicFilter":`, v.setBasicFilter)
	.add!m(b, `"setDataValidation":`, v.setDataValidation)
	.add!m(b, `"sortRange":`, v.sortRange)
	.add!m(b, `"textToColumns":`, v.textToColumns)
	.add!m(b, `"trimWhitespace":`, v.trimWhitespace)
	.add!m(b, `"unmergeCells":`, v.unmergeCells)
	.add!m(b, `"updateBanding":`, v.updateBanding)
	.add!m(b, `"updateBorders":`, v.updateBorders)
	.add!m(b, `"updateCells":`, v.updateCells)
	.add!m(b, `"updateChartSpec":`, v.updateChartSpec)
	.add!m(b, `"updateConditionalFormatRule":`, v.updateConditionalFormatRule)
	.add!m(b, `"updateDataSource":`, v.updateDataSource)
	.add!m(b, `"updateDeveloperMetadata":`, v.updateDeveloperMetadata)
	.add!m(b, `"updateDimensionGroup":`, v.updateDimensionGroup)
	.add!m(b, `"updateDimensionProperties":`, v.updateDimensionProperties)
	.add!m(b, `"updateEmbeddedObjectBorder":`, v.updateEmbeddedObjectBorder)
	.add!m(b, `"updateEmbeddedObjectPosition":`, v.updateEmbeddedObjectPosition)
	.add!m(b, `"updateFilterView":`, v.updateFilterView)
	.add!m(b, `"updateNamedRange":`, v.updateNamedRange)
	.add!m(b, `"updateProtectedRange":`, v.updateProtectedRange)
	.add!m(b, `"updateSheetProperties":`, v.updateSheetProperties)
	.add!m(b, `"updateSlicerSpec":`, v.updateSlicerSpec)
	.add!m(b, `"updateSpreadsheetProperties":`, v.updateSpreadsheetProperties)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateSpreadsheetPropertiesRequest v) => '{'
	.add!m(b, `"properties":`, v.properties)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateSheetPropertiesRequest v) => '{'
	.add!m(b, `"properties":`, v.properties)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateDimensionPropertiesRequest v) => '{'
	.add!m(b, `"dataSourceSheetRange":`, v.dataSourceSheetRange)
	.add!m(b, `"properties":`, v.properties)
	.add!m(b, `"range":`, v.range)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceSheetDimensionRange v) => '{'
	.add!m(b, `"columnReferences":`, v.columnReferences)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateNamedRangeRequest v) => '{'
	.add!m(b, `"namedRange":`, v.namedRange)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const RepeatCellRequest v) => '{'
	.add!m(b, `"cell":`, v.cell)
	.add!m(b, `"range":`, v.range)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddNamedRangeRequest v) => '{'
	.add!m(b, `"namedRange":`, v.namedRange)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteNamedRangeRequest v) => '{'
	.add(b, `"namedRangeId":`, v.namedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddSheetRequest v) => '{'
	.add!m(b, `"properties":`, v.properties)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteSheetRequest v) => '{'
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AutoFillRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"sourceAndDestination":`, v.sourceAndDestination)
	.add(b, `"useAlternateSeries":`, v.useAlternateSeries)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SourceAndDestination v) => '{'
	.add!m(b, `"source":`, v.source)
	.add!m(b, `"dimension":`, v.dimension)
	.add(b, `"fillLength":`, v.fillLength)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CutPasteRequest v) => '{'
	.add!m(b, `"destination":`, v.destination)
	.add!m(b, `"source":`, v.source)
	.add!m(b, `"pasteType":`, v.pasteType)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CopyPasteRequest v) => '{'
	.add!m(b, `"destination":`, v.destination)
	.add!m(b, `"source":`, v.source)
	.addB(b, `"pasteOrientation":"TRANSPOSE"`, !!v.pasteOrientation)
	.add!m(b, `"pasteType":`, v.pasteType)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const MergeCellsRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"mergeType":`, v.mergeType)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UnmergeCellsRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateBordersRequest v) => '{'
	.add!m(b, `"bottom":`, v.bottom)
	.add!m(b, `"innerHorizontal":`, v.innerHorizontal)
	.add!m(b, `"innerVertical":`, v.innerVertical)
	.add!m(b, `"left":`, v.left)
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"right":`, v.right)
	.add!m(b, `"top":`, v.top)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateCellsRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"start":`, v.start)
	.add(b, `"fields":`, v.fields)
	.add!m(b, `"rows":`, v.rows)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddFilterViewRequest v) => '{'
	.add!m(b, `"filter":`, v.filter)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AppendCellsRequest v) => '{'
	.add(b, `"fields":`, v.fields)
	.add!m(b, `"rows":`, v.rows)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const ClearBasicFilterRequest v) => '{'
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteDimensionRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteEmbeddedObjectRequest v) => '{'
	.add(b, `"objectId":`, v.objectId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteFilterViewRequest v) => '{'
	.add(b, `"filterId":`, v.filterId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DuplicateFilterViewRequest v) => '{'
	.add(b, `"filterId":`, v.filterId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DuplicateSheetRequest v) => '{'
	.add(b, `"insertSheetIndex":`, v.insertSheetIndex)
	.add(b, `"newSheetId":`, v.newSheetId)
	.add(b, `"newSheetName":`, v.newSheetName)
	.add(b, `"sourceSheetId":`, v.sourceSheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const FindReplaceRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add(b, `"allSheets":`, v.allSheets)
	.add(b, `"includeFormulas":`, v.includeFormulas)
	.add(b, `"matchCase":`, v.matchCase)
	.add(b, `"matchEntireCell":`, v.matchEntireCell)
	.add(b, `"searchByRegex":`, v.searchByRegex)
	.add(b, `"find":`, v.find)
	.add(b, `"replacement":`, v.replacement)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const InsertDimensionRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add(b, `"inheritFromBefore":`, v.inheritFromBefore)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const InsertRangeRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"shiftDimension":`, v.shiftDimension)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const MoveDimensionRequest v) => '{'
	.add!m(b, `"source":`, v.source)
	.add(b, `"destinationIndex":`, v.destinationIndex)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateEmbeddedObjectPositionRequest v) => '{'
	.add!m(b, `"newPosition":`, v.newPosition)
	.add(b, `"fields":`, v.fields)
	.add(b, `"objectId":`, v.objectId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const PasteDataRequest v) => '{'
	.add!m(b, `"coordinate":`, v.coordinate)
	.add(b, `"html":`, v.html)
	.add!m(b, `"type":`, v.type)
	.add(b, `"data":`, v.data)
	.add(b, `"delimiter":`, v.delimiter)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TextToColumnsRequest v) => '{'
	.add!m(b, `"source":`, v.source)
	.add!m(b, `"delimiterType":`, v.delimiterType)
	.add(b, `"delimiter":`, v.delimiter)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateFilterViewRequest v) => '{'
	.add!m(b, `"filter":`, v.filter)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteRangeRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"shiftDimension":`, v.shiftDimension)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AppendDimensionRequest v) => '{'
	.add!m(b, `"dimension":`, v.dimension)
	.add(b, `"length":`, v.length)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddConditionalFormatRuleRequest v) => '{'
	.add!m(b, `"rule":`, v.rule)
	.add(b, `"index":`, v.index)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateConditionalFormatRuleRequest v) => '{'
	.add!m(b, `"rule":`, v.rule)
	.add(b, `"index":`, v.index)
	.add(b, `"newIndex":`, v.newIndex)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteConditionalFormatRuleRequest v) => '{'
	.add(b, `"index":`, v.index)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SortRangeRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"sortSpecs":`, v.sortSpecs)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SetDataValidationRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"rule":`, v.rule)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const SetBasicFilterRequest v) => '{'
	.add!m(b, `"filter":`, v.filter)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddProtectedRangeRequest v) => '{'
	.add!m(b, `"protectedRange":`, v.protectedRange)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateProtectedRangeRequest v) => '{'
	.add!m(b, `"protectedRange":`, v.protectedRange)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteProtectedRangeRequest v) => '{'
	.add(b, `"protectedRangeId":`, v.protectedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AutoResizeDimensionsRequest v) => '{'
	.add!m(b, `"dataSourceSheetDimensions":`, v.dataSourceSheetDimensions)
	.add!m(b, `"dimensions":`, v.dimensions)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddChartRequest v) => '{'
	.add!m(b, `"chart":`, v.chart)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateChartSpecRequest v) => '{'
	.add!m(b, `"spec":`, v.spec)
	.add(b, `"chartId":`, v.chartId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateBandingRequest v) => '{'
	.add!m(b, `"bandedRange":`, v.bandedRange)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddBandingRequest v) => '{'
	.add!m(b, `"bandedRange":`, v.bandedRange)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteBandingRequest v) => '{'
	.add(b, `"bandedRangeId":`, v.bandedRangeId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CreateDeveloperMetadataRequest v) => '{'
	.add!m(b, `"developerMetadata":`, v.developerMetadata)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateDeveloperMetadataRequest v) => '{'
	.add!m(b, `"developerMetadata":`, v.developerMetadata)
	.add!m(b, `"dataFilters":`, v.dataFilters)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteDeveloperMetadataRequest v) => '{'
	.add!m(b, `"dataFilter":`, v.dataFilter)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const RandomizeRangeRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddDimensionGroupRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteDimensionGroupRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateDimensionGroupRequest v) => '{'
	.add!m(b, `"dimensionGroup":`, v.dimensionGroup)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const TrimWhitespaceRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteDuplicatesRequest v) => '{'
	.add!m(b, `"range":`, v.range)
	.add!m(b, `"comparisonColumns":`, v.comparisonColumns)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateEmbeddedObjectBorderRequest v) => '{'
	.add!m(b, `"border":`, v.border)
	.add(b, `"fields":`, v.fields)
	.add(b, `"objectId":`, v.objectId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddSlicerRequest v) => '{'
	.add!m(b, `"slicer":`, v.slicer)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateSlicerSpecRequest v) => '{'
	.add!m(b, `"spec":`, v.spec)
	.add(b, `"fields":`, v.fields)
	.add(b, `"slicerId":`, v.slicerId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const AddDataSourceRequest v) => '{'
	.add!m(b, `"dataSource":`, v.dataSource)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const UpdateDataSourceRequest v) => '{'
	.add!m(b, `"dataSource":`, v.dataSource)
	.add(b, `"fields":`, v.fields)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DeleteDataSourceRequest v) => '{'
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const RefreshDataSourceRequest v) => '{'
	.add!m(b, `"references":`, v.references)
	.add(b, `"force":`, v.force)
	.add(b, `"isAll":`, v.isAll)
	.add(b, `"dataSourceId":`, v.dataSourceId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceObjectReferences v) => '{'
	.add!m(b, `"references":`, v.references)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const DataSourceObjectReference v) => '{'
	.add!m(b, `"dataSourceFormulaCell":`, v.dataSourceFormulaCell)
	.add!m(b, `"dataSourcePivotTableAnchorCell":`, v.dataSourcePivotTableAnchorCell)
	.add!m(b, `"dataSourceTableAnchorCell":`, v.dataSourceTableAnchorCell)
	.add(b, `"chartId":`, v.chartId)
	.add(b, `"sheetId":`, v.sheetId)
	.finish(b);

bool serializeAsJson(scope ref Buffer b, scope ref const CopySheetToAnotherSpreadsheetRequest v) => '{'
	.add(b, `"destinationSpreadsheetId":`, v.destinationSpreadsheetId)
	.finish(b);
