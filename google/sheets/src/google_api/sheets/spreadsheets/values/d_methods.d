// Autogenerated by discovery-gen v0.x.
module google_api.sheets.spreadsheets.values.d_methods;

public import std.typecons: Nullable, Ternary, apply, nullable; ///

import google_api.d.attributes;
import google_api.d.http: HttpMethod;
import t = google_api.sheets.d_types;

/// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
struct Get {
	enum restHttpMethod = HttpMethod.get; ///
	enum restPath = [`v4/spreadsheets/`, `/values/`, ``]; ///
	alias Response = t.ValueRange; ///

@optional:
	/// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName DateTimeRenderOption dateTimeRenderOption;
	alias DateTimeRenderOption = t.ResponseDateTimeRenderOption; /// ditto
	/// The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
	@byName MajorDimension majorDimension;
	alias MajorDimension = t.MajorDimension; /// ditto
	/// How values should be represented in the output. The default render option is FORMATTED_VALUE.
	@byName ValueRenderOption valueRenderOption;
	alias ValueRenderOption = t.ResponseValueRenderOption; /// ditto
}

/// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
struct Update {
	enum restHttpMethod = HttpMethod.put; ///
	enum restPath = [`v4/spreadsheets/`, `/values/`, ``]; ///
	alias Request = t.ValueRange; ///
	alias Response = t.UpdateValuesResponse; ///

@optional:
	/// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
	Ternary includeValuesInResponse;
	/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName ResponseDateTimeRenderOption responseDateTimeRenderOption;
	alias ResponseDateTimeRenderOption = t.ResponseDateTimeRenderOption; /// ditto
	/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
	@byName ResponseValueRenderOption responseValueRenderOption;
	alias ResponseValueRenderOption = t.ResponseValueRenderOption; /// ditto
	/// How the input data should be interpreted.
	@byName ValueInputOption valueInputOption;
	alias ValueInputOption = t.ValueInputOption; /// ditto
}

/// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
struct Append {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values/`, `:append`]; ///
	alias Request = t.ValueRange; ///
	alias Response = t.AppendValuesResponse; ///

@optional:
	/// Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
	Ternary includeValuesInResponse;
	/// How the input data should be inserted.
	@byName InsertDataOption insertDataOption;
	alias InsertDataOption = t.InsertDataOption; /// ditto
	/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName ResponseDateTimeRenderOption responseDateTimeRenderOption;
	alias ResponseDateTimeRenderOption = t.ResponseDateTimeRenderOption; /// ditto
	/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
	@byName ResponseValueRenderOption responseValueRenderOption;
	alias ResponseValueRenderOption = t.ResponseValueRenderOption; /// ditto
	/// How the input data should be interpreted.
	@byName ValueInputOption valueInputOption;
	alias ValueInputOption = t.ValueInputOption; /// ditto
}

/// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
struct Clear {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values/`, `:clear`]; ///
	alias Request = t.ClearValuesRequest; ///
	alias Response = t.ClearValuesResponse; ///
}

/// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
struct BatchGet {
	enum restHttpMethod = HttpMethod.get; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchGet`]; ///
	alias Response = t.BatchGetValuesResponse; ///

@optional:
	/// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	@byName DateTimeRenderOption dateTimeRenderOption;
	alias DateTimeRenderOption = t.ResponseDateTimeRenderOption; /// ditto
	/// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
	@byName MajorDimension majorDimension;
	alias MajorDimension = t.MajorDimension; /// ditto
	/// How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.
	@byName ValueRenderOption valueRenderOption;
	alias ValueRenderOption = t.ResponseValueRenderOption; /// ditto
	/// The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.
	string[ ] ranges;
}

/// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
struct BatchUpdate {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchUpdate`]; ///
	alias Request = t.BatchUpdateValuesRequest; ///
	alias Response = t.BatchUpdateValuesResponse; ///
}

/// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
struct BatchClear {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchClear`]; ///
	alias Request = t.BatchClearValuesRequest; ///
	alias Response = t.BatchClearValuesResponse; ///
}

/// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
struct BatchGetByDataFilter {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchGetByDataFilter`]; ///
	alias Request = t.BatchGetValuesByDataFilterRequest; ///
	alias Response = t.BatchGetValuesByDataFilterResponse; ///
}

/// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
struct BatchUpdateByDataFilter {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchUpdateByDataFilter`]; ///
	alias Request = t.BatchUpdateValuesByDataFilterRequest; ///
	alias Response = t.BatchUpdateValuesByDataFilterResponse; ///
}

/// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
struct BatchClearByDataFilter {
	enum restHttpMethod = HttpMethod.post; ///
	enum restPath = [`v4/spreadsheets/`, `/values:batchClearByDataFilter`]; ///
	alias Request = t.BatchClearValuesByDataFilterRequest; ///
	alias Response = t.BatchClearValuesByDataFilterResponse; ///
}
